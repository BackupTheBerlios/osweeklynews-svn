<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://maketecheasier.com/create-tilt-shift-effect-in-gimp/2011/06/23">Make Tech Easier/Joshua Price: How to Create Tilt Shift Effect in Gimp</ulink>
      </title>
      <para>This isn’t something you’ll often do for work or a real project, but it’s fun and it can look cool. Tilt shifting a photo is something that can be done by expensive fancy camera equipment or, fortunately for us, free software. The idea is that when you take a photo of small scale objects like model towns, part of what reveals them as miniature is the difference in focus. When a camera is up close to small objects, it can’t focus on other nearby objects, making them blurry. Tilt shifting is applying this blur effect deliberately, to make large-scale objects appear small. Getting it just right can take a lot of time and effort, but the basic method is quite simple, and that’s what we’re covering today. (...)</para>
<!-- ($ Id: 2.7.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://linuxaria.com/howto/bash-linux-less?lang=en">Linuxaria/linuxari: Do more with less</ulink>
      </title>
      <para>less it’s a fundamental command if you work on the Linux terminal.</para>
      <para>Doing a “man less” you can see:</para>
      <para>NAME</para>
      <para>less - opposite of more</para>
      <para>I love Gnu/Linux man pages, in this case it refer to more another command that do similar things (but less).</para>
      <para>The Linux command less is similar to cat, but with less you can scroll the file instead of showing the file at once. With less command you can scroll up in the file as well as down, where with the Linux command more you can only scroll down the file. (...)</para>
<!-- ($ Id: 2.7.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://www.linux-mag.com/id/8797/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%20%3A+LinuxMagazine+%28Linux+Magazine%3A+Top+Stories%29">Linux Magazine/Ken Hess: Scripting, Part Two: Looping for Fun and Profit</ulink>
      </title>
      <para>You energy-conserving* system administrators will enjoy learning to use loops in your scripts. Looping is a technique that allows you to repeat a process or set of commands indefintely or until the loop exhausts a particular list of items. For example, you want to copy a particular file to everyone’s home directory. How do you do it? Don’t say that you have a junior-level administrator do it. The correct answer is that you’d create a looping script to handle the job.</para>
      <para>Don’t worry if you aren’t a scripting master, I’m going to take it slow through this series so that you can absorb what’s going on. Looping is not a particularly advanced concept. Its purpose is to do some task quickly that would take hours or days to do it by hand. Looping leverages the computer’s power to do what it’s best at: repetitive processing. (...)</para>
<!-- ($ Id: 2.7.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink url="http://www.linuxjournal.com/content/accessing-remote-files-easy-and-secure">LinuxJournal/Johan Tehlin: Accessing Remote Files Easily and Securely</ulink>
      </title>
      <para>The secure shell, ssh, and its companion, scp, are tools that I use more or less on a
        daily basis. Being able to move files between machines without having to setup SAMBA or NFS
        is very handy when working with multiple systems. All that you need is to enable the secure
        shell daemon - sshd.</para>
      <para>Before we go into the details of the sshfs, let&apos;s run through a quick re-cap of ssh. The
        secure shell daemon runs on port 22 by default. It makes it possible to run an encrypted
        shell session. With the -Y flag, you can even run X11-forwarding, allowing you to run X11,
        i.e. graphical, programs on the remote machine and displaying the windows on the terminal
        that you are sitting at.</para>
      <para>You can configure sshd through the /etc/ssh/sshd_config file (that is the location on my
        Kubuntu machine). Here, you can disable root access, older protocols, X11 forwarding, etc.
        The notion is that the more limits you put on the remote access, the more secure your system
        is from potential attacks. You might also want to tune your hosts.allow and hosts.deny files
        if you plan to expose sshd to the Internet. There are many guides on hardening servers and
        ssh, so I will not go into details.</para>
<!--($ Id: 28.6.11 sm $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.howtoforge.com/opensuse-11.4-samba-standalone-server-with-tdbsam-backend">HowtoForge/Falko Timme: OpenSUSE 11.4 Samba Standalone Server With tdbsam Backend</ulink>
      </title>
      <para>This tutorial explains the installation of a Samba fileserver on OpenSUSE 11.4 and how to configure it to share files over the SMB protocol as well as how to add users. Samba is configured as a standalone server, not as a domain controller. In the resulting setup, every user has his own home directory accessible via the SMB protocol and all users have a shared directory with read-/write access. (...)</para>
<!-- ($ Id: 2.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://beginlinux.com/desktop/opensuse/configuring-a-samba-print-server">BeginLinux: Configuring a SAMBA Print Server</ulink>
      </title>
      <para>You may be using Linux at home or in an office environment, but often we still need to provide access to Windows desktops. Begin Linux has taken you though <ulink url="http://beginlinux.com/desktop/opensuse/1578-adding-standard-windows-domain-groups">setting up a SAMBA Domain Controller and File Server</ulink> on openSUSE 11.4. In this tutorial, again using openSUSE 11.4 we will take the time to look at adding in Print Server capabilities. Providing Windows Users have transparent access to printing. The assumption is made that SAMBA is already installed and running on your Linux Server.</para>
      <para>We will setup a CUPS (Linux printing) but no great detail of Linux printing is entered into as we are concentrating on SAMBA printing. (...)</para>
<!-- ($ Id: 2.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.howtoforge.com/how-to-set-up-a-postgresql-9.0-hot-standby-streaming-replication-server-with-repmgr-on-opensuse-11.4">HowtoForge/wintel2006: How To Set Up A Postgresql 9.0 Hot Standby Streaming Replication Server With Repmgr On OpenSUSE 11.4</ulink>
      </title>
      <para>There are tons of tutorials about how to setup streaming replication on postgresql 9.0, and detailed documentation on repmgr, the SR manager program from 2ndQuadrant. Like they said on repmgr homepage:</para>
      <para>&quot;PostgreSQL 9.0 allow you to have replicated hot standby servers which you can query and/or use for high availability. While the main components of the feature are included with PostgreSQL, the user is expected to manage the high availability parts. repmgr allows you to monitor and manage your replicated PostgreSQL databases as a single cluster.&quot;</para>
      <para>This is a tutorial how to set up a postgresql replicated hot standby server with streaming replication, and we also set up the repmgr to monitor and manage the replication cluster. Unlike most tutorials that copy the database file from master to slave (or standby) in the middle of running pg_start_backup() and pg_end_backup(), repmgr is used to simplify the whole procedure. (But I still think that procedure helps you a lot to understand how postgresql warm standby, pitr, and hot standby replication work.) (...)</para>
<!-- ($ Id: 2.7.11 sat $)-->    </blockquote>
  </sect2>
</sect1>
