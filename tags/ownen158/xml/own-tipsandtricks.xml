<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink
          url="http://www.freesoftwaremagazine.com/columns/creating_moving_story_reel_shot_inkscape_and_blender"
          >FreeSoftwareMagazine/Terry Hancock: Creating a moving story-reel shot with Inkscape and
          Blender</ulink>
      </title>
      <para>There’s a reason they’re called “movies.” They’re supposed to move. Your eyes are keyed
        to follow motion, and the constant revelation of new information in a moving shot holds your
        interest longer. Thus, while four seconds might be about the maximum comfortable length for
        a static shot, shots in which the camera or subject are moving extensively can often last
        more than a minute without feeling slow at all. Storyboards made entirely from static images
        make it hard to judge active shots. It’s useful, therefore, to be able to insert some
        movement at the storyboard phase by panning and zooming a drawing. Here I’m going to
        demonstrate such an animated storyboard using Inkscape and Blender. (...)</para>
      <!-- ($ ld: 15.1.11 sat $) -->
    </blockquote>
    <blockquote>
      <title><ulink
          url="http://psankar.blogspot.com/2011/01/download-all-youtube-videos-of-user.html">Sankar
          P: Download all youtube videos of an user</ulink></title>
      <para>Recently I got addicted to watching Nigella Lawson Cooking videos on youtube. As much as
        I like youtube, I prefer to watch videos offline as well. One user has uploaded a lot of
        those videos and I wanted to download all the videos by that user. </para>
      <para>I tried a few firefox plugins, youtube-dl python script, etc. for doing this but none
        seemed to be fit for the job. Good old Shell-script came for rescue. I saved the user's
        youtube homepage in .html, grepped through the file for links, ran uniq and then fed them
        all to youtube-dl and bulk-downloaded all the videos. If you want parallel downloads, you
        can easily do that also by tweaking the script.</para>
      <para>The commands
        are:<screen>grep -E 'http://www.youtube.com/watch\?v=[[:alnum:]-]{11}' dump.html -o | uniq > vdos
for i in `cat vdos`; do youtube-dl -t $i; done; rm vdos;</screen></para>
      <para>HTH someone. </para>
      <para>If you know of a better solution (some firefox/chrome addon, Greasmonkey, etc.) which
        will work in Linux, please let me know.</para>
      <!-- ($ ld: 15.1.11 sm $) -->
    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/bash-shell/using-pipes-in-the-bash-shell/">BashShell.net:
          Using Pipes in the Bash Shell</ulink>
      </title>
      <para>The usage of pipes with the shell is easy and powerful. This lab will help you
        understand the use of pipes. (...)</para>
      <!-- ($ ld: 15.1.11 sat $) -->
    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://www.cyberciti.biz/tips/linux-shared-library-management.html"
          >nixCraft/Vivek Gite: Linux Commands For Shared Library Management &amp; Debugging
          Problem</ulink>
      </title>
      <para>If you are a developer, you will re-use code provided by others. Usually /lib, /lib64,
        /usr/local/lib, and other directories stores various shared libraries. You can write your
        own program using these shared libraries. As a sys admin you need to manage and install
        these shared libraries. Use the following commands for shared libraries management,
        security, and debugging problems. (...)</para>
      <!-- ($ ld: 15.1.11 sat $) -->
    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink url="http://www.linux.com/learn/tutorials/396770-linux-kernel-module-management-101"
          >Linux.com/Joe Brockmeier: Linux Kernel Module Management 101 </ulink>
      </title>
      <para>The Linux kernel allows drivers and features to be compiled as modules rather than as
        part of the kernel itself. This means that users can often change features in the kernel or
        add drivers without recompiling, and that the Linux kernel doesn&apos;t have to carry a lot
        of unnecessary baggage. Want to learn how to manage your modules? It&apos;s easy to do, just
        keep reading. </para>
      <para>In this tutorial, we&apos;ll walk through the steps of seeing what&apos;s already loaded
        in the running kernel, and adding and removing modules from the kernel. (...) <emphasis
          role="bold">License</emphasis>: <link linkend="excopyright">1</link></para>
      <!-- ($ ld: 13.1.11 sm $) -->
    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://opensuse.terrorpup.net/?p=196">Chuck Payne: System Administrator 101 — A
          Basic Bash Loop — Part 1 “for”</ulink>
      </title>
      <para>Being a System Administrator you will find that you need to do a lot of repetitive
        tasks. Moving files, grepping files, and creating users. You could spend all your time type
        the same commands over and over, but why? </para>
      <para>You can save a lot of time by looping commands. There are three ways you can do that, by
        using one of the following; for, while or until. We will first focus on for, it my favorite
        of the three. </para>
      <para>The thing to remember with a ‘for loop’ is the following
        syntax:<screen>for variable in x y z ; do command $variable ; done</screen></para>
      <para>Variable is what ever you want to call it. Most people use i as a variable, but again it
        can be anything you want. The x y x is the information that you want to pass to the command.
        The last thing to remember with a loop is when it passed everything to the command that if
        finish, that is why you need the done. </para>
      <para>Here is an example of a simple count down that you can do with for a ‘for
        loop’.<screen>for i in 10 9 8 7 6 5 4 3 2 1 ; do echo $i ; done</screen></para>
      <para>As you can see, we have set our variable to be i, in that variable we are going to pass
        10 to 1 to the command echo. By the way, you can do this another way if you are using Bash
        4.0, by changing the number to {10…1} , this because of inbuilt support for setting up a
        step value use {START..END..INCREMENT} . </para>
      <para>Here is another example, we are going fun and make the computer count out load to 100 by
        5′s…<screen>for x in {5..100..5} ; do echo $x | festival --tts ; done</screen></para>
      <para>In this loop we set our variable to x, and we told it to start with 5 go to 100 by
        increments of 5. We then passed that on to echo that is piped into festival to read it out
        load, once it had reach 100, it stops. </para>
      <para>Here are some real world examples of how System Administrator use a ‘for loop’. Let say
        you have a text file that you keep a list of Linux servers that you take care and you need
        to push a rpm or a file to
        them.<screen> linux01 192.168.1.1
 linux05 192.168.1.5
 linux10 192.168.1.10
 linux20 192.168.1.20</screen></para>
      <para>With a ‘for loop’ it is very simple and fast. We are going to cat the file so that we
        know what server to access. We are also going to use awk so that we get the ip from the
        second coloumn. To get the information we will need to pipe ‘ | “ the loop into the awk
        command to get it, because we are run commands to get the information for the loop we will
        need to use ` ` in order to run the
        statement.<screen>for f in `cat linux_server | awk &apos;{ print $2}&apos;` ; do scp somefile user@$f:/dir ; done</screen></para>
      <para>This loop tell that our variable f is going to pass the four ip so that we can scp the
        file to those boxes.<note>
          <para>If you are not sure about what the output going to look like, it always best to use
            the following to see what the output going to be….<screen>echo $f</screen></para>
        </note></para>
      <para>Now lets say that file you pushed to the server is rpm that you need to update your
        server. You can do ‘for loop’, using ssh and pass the command to the boxes to update that
        rpm<screen>for r in `cat linux_server | awk &apos;{ print $2 }` ; do ssh user@$r rpm -Uvh /dir/myfile ; </screen><screen>done</screen></para>
      <para>To ensure that the file was updated, you can do another ‘for loop’ check the rpm
        database to see if there by doing rpm -qa and pipe into a grep with the file
        name.<screen>for r in `cat linux_server | awk &apos;{ print $2 }` ; do ssh user@$r rpm -qa | grep myfile ; </screen><screen>done</screen></para>
      <para>By the way you can use all of these commands together in one script to save even more
        time.<programlisting>#!/bin/bash
 servers=”linux_server”
 files=”files_to_push”
 
# Here we are going push files 
for f in `cat $servers | awk &apos;{ print $2}&apos;` ; do scp $files user@$f:/dir ; done
# Here we are going to install the files 
for r in `cat $servers | awk &apos;{ print $2 }` ; do ssh user@$r rpm -Uvh /dir/$files ; done
# Here we are going to check if it got installed 
for x in `cat $servers | awk &apos;{ print $2 }` ; do ssh user@$x rpm-qa | grep $files ; done
exit 0</programlisting></para>
      <para>As great System Administrator, finding the simplest ways to do recurring tasks frees up
        your time for tackling more complex problems . A ‘for loop’ is a great way to help. Next
        time I will go over while. <emphasis role="bold">License</emphasis>: <link linkend="excopyright"
          >3</link></para>
      <!-- ($ ld: 14.1.11 sm $) -->
    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://lizards.opensuse.org/2011/01/13/opensuse-factory-ati-firegl-10-12/"
          >Nelson Marques: openSUSE Factory: ATI FireGL 10.12</ulink>
      </title>
      <para>I’ve had some problems in the past with openSUSE Factory and ATI support… even the
        normal radeon driver wasn’t worked properly. After the last updates, the radeon driver
        started working properly and I’ve decided to install the ATI FireGL driver which is actually
        something I need to continue testing and debug Unity implementation on openSUSE. </para>
      <para>IT WORKS! </para>
      <para>Here’s what you need (64 bit users):<itemizedlist>
          <listitem>
            <para>Install the required dependencies to compile the kernel module (currently on
              ﻿﻿﻿﻿﻿2.6.37-rc5-12-desktop). 64bit users will require the
              following:<screen>zypper in kernel-source compat-32bit qt3-32bit libstdc++ libgcc xorg-x11-libs-32bit \</screen><screen>xorg-x11-devel-32bit Mesa-devel-32bit \</screen><screen>fontconfig-32bit expat-32bit freetype2-32bit zlib-32bit gcc make</screen></para>
          </listitem>
          <listitem>
            <para>Download ATI FireGL driver (version 10.12) from ATI website (http://ati.amd.com).
            </para>
          </listitem>
          <listitem>
            <para>Extract the files using the
              command:<screen>sh ati-driver-installer-10-12-x86.x86_64.run --extract</screen></para>
            <para>This will create a small folder which starts with fglrx. Change directory into
              that folder… </para>
          </listitem>
          <listitem>
            <para> Download the following patches:<itemizedlist>
                <listitem>
                  <para><ulink
                      url="http://aur.archlinux.org/packages/catalyst/catalyst/sema_init.patch"
                      >sema_init.patch</ulink></para>
                </listitem>
                <listitem>
                  <para><ulink
                      url="http://aur.archlinux.org/packages/catalyst/catalyst/fglrx-2.6.36.patch"
                      >fglrx-2.6.36.patch</ulink></para>
                </listitem>
                <listitem>
                  <para><ulink
                      url="http://aur.archlinux.org/packages/catalyst/catalyst/makefile_compat.patch"
                      >makefile_compat.patch</ulink></para>
                </listitem>
              </itemizedlist></para>
          </listitem>
          <listitem>
            <para>Apply the patches (patch -p1 &lt; file.patch).</para>
          </listitem>
          <listitem>
            <para>Run the following
              command:<screen>sh ati-installer.sh 8.801 --install</screen></para>
          </listitem>
          <listitem>
            <para>Follow the installer instructions. Finally check /usr/share/ati/fglrx-install.log
              to check if everything is cool…</para>
          </listitem>
          <listitem>
            <para>Restart using your favorite method… mine is ‘shutdown now -frn’.</para>
          </listitem>
        </itemizedlist></para>
      <para>Enjoy FireGL on openSUSE Factory!</para>
      <!-- ($ ld: 14.1.11 sm $) -->
    </blockquote>
    <blockquote>
      <title>
        <ulink
          url="http://www.howtoforge.com/installing-cherokee-with-php5-and-mysql-support-on-opensuse-11.3"
          >HowtoForge/Falko Timme: Installing Cherokee With PHP5 And MySQL Support On OpenSUSE
          11.3</ulink>
      </title>
      <para>Cherokee is a very fast, flexible and easy to configure Web Server. It supports the
        widespread technologies nowadays: FastCGI, SCGI, PHP, CGI, TLS and SSL encrypted
        connections, virtual hosts, authentication, on the fly encoding, load balancing, Apache
        compatible log files, and much more. This tutorial shows how you can install Cherokee on an
        OpenSUSE 11.3 server with PHP5 support (through FastCGI) and MySQL support. (...)</para>
      <!-- ($ ld: 15.1.11 sat $) -->
    </blockquote>
  </sect2>
</sect1>
