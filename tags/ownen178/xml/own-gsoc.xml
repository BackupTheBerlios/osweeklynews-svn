<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC 
  "-//OASIS//DTD DocBook XML V4.5//EN" 
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 id="gsoc" role="gsoc">
  <title>Google Summer of Code</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="http://michal.hrusecky.net/wp-content/uploads/GSoC2011_300x200.png"
        width="20%" align="center"/>
    </imageobject>
  </mediaobject>
  <blockquote>
    <title><ulink url="http://lists.opensuse.org/opensuse-project/2011-06/msg00002.html">Mihnea
        Dobrescu-Balaur: Bug Reporting Tool - weekly report #2</ulink></title>
    <para>The update this week brings us the system data gathering module along with some
      sub-modules for various information to be gathered for the system. </para>
    <para>The concept envisioned is something like this: there will be a 'gather.d/' folder, where
      programs can install their own relevant data gathering modules. At the moment, we have these:
      lsmod, uname, release, cpu-model, amount of RAM and video card model. </para>
    <para>These small modules parse the relevant data from the corresponding locations and all the
      data gets put together in a dictionary by gather.py. We opted for this version because we can
      use the dictionary to export the data as JSON, or ini-style, or whatever feels appropriate.
      Also, because of this, the data will be easily parseable for the maintainers who read our bug
      reports. </para>
    <para>As usual, you can find the code here: <ulink
        url="https://github.com/mihneadb/Suse-Bug-Reporter"
        >https://github.com/mihneadb/Suse-Bug-Reporter</ulink></para>
    <para>Will get back to you next week! (last week with exams).</para>
    <para>Mihnea DB</para>
    <!-- ($ ld: 4.6.11 sm $) -->
  </blockquote>
  <blockquote>
    <title>
      <ulink
        url="http://cbounta.wordpress.com/2011/06/03/a-utility-for-merging-configuration-sysconfig-files-week-2-report/"
        >Christos Bountalis: A utility for merging configuration / sysconfig files – Week
        2 Report</ulink></title>
    <para>This is my second report about my gsoc project, well what is new: This week I occupied my
      self with augeas, it is the first time I try to use and expand an already existing library and
      utility. Even thought Augeas is very well documented and the people in their community are
      very helpful, i had some problems combining my thoughts and ideas with the existing code,
      because i was trying to find out the best way to avoid code duplication etc. That was at least
      at the start, now at the end of the week I can say that I am more familiar with the Augeas API
      and this will certainly help me in the coming weeks.</para>
    <para>As long as it concerns the actual merging procedure, i began coding an implementation i
      have thought. Unfortunately, the approach i used was not sufficient generalized to work with
      all the configuration files. Therefor i had, to erase most of the coding i did these days.
      However, from every negative thing comes a positive, in this case, I was able to find a better
      solution that rise some new problems, however i hope I will be able to find out an answer for
      them in the following days and implement the right code.</para>
    <para>Finally, a merge tool command was added in augtool that is able to use the aug_merge
      command i added in the library, the particular command will accept a source and a dest
      tree/path and will then try to combine them according to the flags that i will add as
      enumeration. The final conclusion I must speed up things a bit  cause there are unexpected
      problems that may occur at the implementation at any time.</para>
    <!-- ($ ld: 4.6.11 sm $)-->
  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://redache.wordpress.com/2011/06/03/entomologist-weekly-report-2/">David
        Williams: Redache's Programming Blog</ulink></title>
    <para>This week I’ve been focusing on implementing the tabbed interface for Entomologist so that
      trackers are separated out into individual tabs. There are a few things still left to complete
      (primarily deletion of a tracker) but they do work!. I’d planned to also add the statistics
      element to the User Interface but I’ve not been able to move on to that and the work required
      to get statistics from a bug tracker will be more than I thought. This is why I’d added a
      second week to this specific part of my UI work as I knew that there is a potential for
      problems to arise. Once this work is completed I will then implement a “New Comment” interface
      that is a separate window from the main UI that allows a user to view past comments and upload
      new comments (The current expanded panel will remain as a “quick view” mode for past
      comments).</para>
    <para>The current timeline for the project can be found here.</para>
    <para>This work will conclude hopefully by the end of next week as I would really like to start
      working on the TODO list as soon as possible and as highlighted in the timeline, hopefully
      iCal support can be added so that Entomologist can manage TODO lists of bugs with a wide
      variety of different Calendars.</para>
    <para>The main things that have tripped me up this week is getting lost in MainWindow.cpp as it
      is quite a large file to focus on and sometimes things that should be obvious weren’t quite so
      obvious.</para>
    <para>I’ll update this post with screenshots of the changes once I’ve managed to finish the Look
      and Feel changes for the Tabs.</para>
    <!--($ ld: 4.6.11 sm $)-->
  </blockquote>
  <blockquote>
    <title><ulink url="http://lists.opensuse.org/opensuse-project/2011-06/msg00003.html">Marcus
        Hüwe: osc code cleanup - summary of week 2</ulink></title>
    <para>here's a small summary of the 2nd (coding) week. Thisweek I spent most of my time with
      working on an OO-style classfor doing http requests:<itemizedlist>
        <listitem>
          <para>it's possible to switch the http(s) implementation without touching anylibrary
            code</para>
        </listitem>
        <listitem>
          <para>supports response validation (if a schema was specified for the request)</para>
        </listitem>
      </itemizedlist></para>
    <para>Currently I'm still working on the "remote models":<itemizedlist>
        <listitem>
          <para>decided to use <ulink url="http://lxml.de/objectify.html">lxml.objectify</ulink>:<itemizedlist>
              <listitem>
                <para>goal is to encapsulate the xml logic solely into the object itself</para>
              </listitem>
              <listitem>
                <para>example
                  workflow:<screen>prj = RemoteProject('some_name')
prj.title = 'dummy'
prj.description = 'foo bar'
repo =prj.add_repository(name='openSUSE_Factory')
repo.add_path(project='openSUSE:Factory',
      repository='standard')
repo.add_arch('i586')
# change arch to x86_64
repo.arch[0] = 'x86_64'repo.save()</screen></para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </itemizedlist></para>
    <para>Minor stuff:<itemizedlist>
        <listitem>
          <para>decided to use the "logging" module: this way we can easily add "debug" and "info"
            etc. messages and it's up tothe "client" which messages it wants to display (I'm not
            talking aboutthe messages which are displayed when "osc up" is called or something
            likethat)</para>
        </listitem>
      </itemizedlist></para>
    <!--($ ld: 4.6.11 sm $)-->
  </blockquote>
</sect1>
