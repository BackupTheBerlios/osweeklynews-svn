<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC 
  "-//OASIS//DTD DocBook XML V4.5//EN" 
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="planetsuse">
  <title>Planet SUSE</title>
  <blockquote>
    <title><ulink url="http://log.or.cz/?p=108"
      >Petr Baudis: quick update</ulink></title>
    <para>Couple of things to blog about accumulated again, so I guess I will be posting bunch of articles soon. For such a long gap, a general update is in order, 
    I suppose.</para>
    <para>Aside of my studies, continuous MCTS (Go) research, grinding away on random glibc bugs and such, I most notably got involved in <emphasis role="bold">brmlab</emphasis> this summer – 
      the <ulink url="http://brmlab.cz/">Prague hackerspace</ulink>. We got a pretty thriving community there now, with various cool events, a lot of great projects (I’m involved in quite a few), and so on!</para>
    <para>Well, I wanted to mention more, but I can’t remember it right now. I suppose it will just come together. Oh, and seeing my last post – I have a new bike, this time 
      with insurance. ;-)</para>
    <!-- ($ ld: 28.12.10 sm $) -->
  </blockquote>
  <blockquote>
    <title><ulink url="http://log.or.cz/?p=110">Petr Baudis: Datasheet Translator</ulink></title>
    <para>As we (well, mostly other people than me) were dealing with a rather obscure micro-controller when hacking our laser projector in brmlab, the only datasheet we have found has been in Chinese. This is quite 
      often the case with obscure China-made parts (including event stuff like LEDs) and it’s annoying to deal with.</para>
    <para>So I hacked together a simple datasheet translator – you feed it a PDF with your datasheet, specify the source language, let it munch away for a minute and then it spews out a link to the 
    English translation!</para>
    <itemizedlist>
      <listitem><para><ulink url="http://datasheet-en.or.cz/">http://datasheet-en.or.cz</ulink></para></listitem>
      <listitem><para>Example: <ulink url="http://tinyurl.com/2bbq6o7">http://tinyurl.com/2bbq6o7</ulink></para></listitem>
    </itemizedlist>
    <para>Its user interface is extremely rudimentary, if someone wants to add an AJAXy progressbar and what-not, just let me know. :-)</para>
    <para>The “technology” is not much to mention either – thankfully, pdftohtml can do quite nifty stuff nowadays (just needs a lot of beating to properly zoom the documents), and Google Translate can do awesome 
      job with technical documents.</para>
    <!-- ($ ld: 28.12.10 sm $) -->
  </blockquote>
  <blockquote>
    <title><ulink url="http://lizards.opensuse.org/2010/12/23/more-unity-news/">Nelson Marques: More
        ‘Unity’ news…</ulink></title>
    <para>I’ve finished with the base packages required for Unity, in fact Unity already builds,
      though I’ve not really tested it yet as some components still need to take care… so far what’s
      done:</para>
    <itemizedlist>
      <listitem>
        <para>dee – is now properly packaged and ready for submission (no patching required);</para>
      </listitem>
      <listitem>
        <para>bamf – is now properly packaged and ready for submission (includes a patch modified by
          Adam Williamson based on a Debian patch);</para>
      </listitem>
      <listitem>
        <para>ux – builds and in a way it’s ready, though I want to split this package in the nearby
          future.</para>
      </listitem>
      <listitem>
        <para>unity – builds for the time being… though it requires proper integration on the
          system. This build also builds with support for Indicators, since the dependencies are
          already prepared. Will take now a bit of time due to integration. I will offer this
          package installed on /opt/unity and not on usual system path.</para>
      </listitem>
    </itemizedlist>
    <para>While fighting for dependencies there emerged a small problem with ‘glewmx’, which builds
      from the same sources of ‘glew’. I’m currently working on this package as a priority to fix it
      and submit it to ‘multimedia:libs’ which also hosts ‘glew’. This package has also a small
      patch by Adam Williamson which was already submitted upstream that allows the proper build of
      ‘libGLEWmx.so*’ and glewmx.pc. Currently I’ve built this package only offering the libs. I’ve
      removed the binaries (and made a dependency on ‘glew’ for the binaries) and I’ve also removed
      the headers from the includes which will be shared with ‘glew’ and made a proper dependency.
      I’ve consulted Dimstar regarding this operation which promptly offered some quick guidance on
      the process and showed a couple of useful examples on how to this ‘the openSUSE way’.</para>
    <para>I hope that before the new year there’s a test package of Unity for Factory users. I would
      also take this opportunity to thank everyone which has helped me so far on this ‘one man
      inglorious rush’ towards bringing Unity to openSUSE as an option for those who want to check
      it out.</para>
    <para>My sincere thanks to the following:</para>
    <itemizedlist>
      <listitem>
        <para>Vincent Untz (openSUSE/Novell);</para>
      </listitem>
      <listitem>
        <para>Ken Vandine (Canonical);</para>
      </listitem>
      <listitem>
        <para>Cristopher Roges (Ubuntu);</para>
      </listitem>
      <listitem>
        <para>Adam Williamson (Fedora/Red Hat);</para>
      </listitem>
      <listitem>
        <para>openSUSE GNOME team;</para>
      </listitem>
      <listitem>
        <para>The openSUSE community, specially those which have supported this effort since day
          #1.</para>
      </listitem>
      <listitem>
        <para>Arch Linux contributors (which were working on this and from which I got some guidance
          from their ‘forums’);</para>
      </listitem>
    </itemizedlist>
    <para>Nelson Marques</para>
    <!-- ($ ld: 23.12.10 sm $) -->
  </blockquote>
  <blockquote>
    <title><ulink
      url="http://lizards.opensuse.org/2010/12/23/rubygem-studio_api/">Josef
        Reidinger: Easy scripting actions with susestudio alias new rubygem
      studio_api</ulink></title>
    <para>Now I work for SLMS ( Suse Lifecycle Management Server ) project. It cooperate with SuSE
      studio and use its API. I get idea that more people could benefit from easy access to studio
      API from ruby so I extract functionality and improve behavior, documentation and testing and
      now there is new rubygem studio_api. Why you should use this gem?</para>
    <itemizedlist>
      <listitem>
        <para>ActiveResource Behavior</para>
      </listitem>
      <listitem>
        <para>Actively maintained ( and will be due to SLMS support )</para>
      </listitem>
      <listitem>
        <para>Tightly developed with guys from studio team</para>
      </listitem>
      <listitem>
        <para>Well documented with yard</para>
      </listitem>
      <listitem>
        <para>Good test coverage.</para>
      </listitem>
    </itemizedlist>
    <para>I think then a lot of glory words is better to show example. It is example based on
      example from documentation. Example goal is simple. Create new appliance in studio, add own
      cool rpm and build appliance with it. It can be useful to test your new version of software in
      stable environment and have automatic appliance in which you can test it. (...)</para>
    <!-- ($ ld: 23.12.10 sm $) -->
  </blockquote>
</sect1>
