<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://opensuseadventures.blogspot.com/2011/11/gobi-loader-and-mobile-broadband.html">Roger Luedecke: Gobi loader and mobile broadband providers</ulink>
      </title>
      <para>I don&apos;t know how many of you have 3G hardware built into your netbooks, but as you can
        probably guess its not always straightforward. Frankly, it took me months to figure out what
        I was doing and get it working consistently. Then while I was running 11.4 I decided to give
        Mandriva a try (which had some critical flaws) and so I reinstalled openSUSE. Now all of a
        sudden the process I had figured out so well, didn&apos;t work as it should have. I was tired of
        reinstalling and trying to figure it out, so I figured I would just wait until 12.1 came out
        and pray that the fresh install of it would fix my problem. </para>
      <para>So now I have installed 12.1RC2. And at first it looked encouraging, though the hardware
        wasn&apos;t accesible quite I could however go into the NetworkManager Mobile Broadband tab to
        set up a connection and it would show me Verizon as selectable. That is what the crucial
        problem I have been having is about; Verizon is not selectable for some odd reason. Maybe,
        just maybe I somehow did get the firware mixed up but I severely doubt it since I remember
        having to go through this process a few times.</para>
      <para><inlinegraphic fileref="http://4.bp.blogspot.com/-wcHIM8JzaeI/TsCNhUw6VyI/AAAAAAAAAKY/ZmmWUIKDcVs/s640/whereisverizon.png" width="40%"/></para>
<!-- ($ Id: 15.11.11 sm $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://www.linuxforum.com/content.php/131-Screen-The-Path-For-Beginners">LinuxForum.com/steelmanronald06: Screen - The Path For Beginners</ulink>
      </title>
      <para><emphasis role="bold">Overview &amp; Uses</emphasis></para>
      <para>Screen is a great tool, and highly recommended, tool for any Linux user. It provides a Terminal environment that can withstand network disconnects, random computer restarts, power outages at home and more. With screen you can be assured that if PuTTY, or whatever SSH Client you use, closes you will almost never lose your work. Sadly this is not true for a server restart, as far as I&apos;m aware, but it still provides amazing possibilities. In this wiki you&apos;ll find instructions for installation and customization that will not only enhance screen for the best, but will also make it more enjoyable to use. If you&apos;re like me, once you start to use screen you&apos;ll never go back to mundane old terminal. Please note that all of these steps were done on my system, which I will provide screenshots for, but this is not the only way to set your screen environment up. To add to that, there are also numerous other alterations you may make to your screen environment. Feel free to play around with it and see what you come up with. (...)</para>
<!-- ($ Id: 17.11.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://how-to.linuxcareer.com/learning-linux-commands-dd">LinuxCareer.com/Rares Aioanei: Learning Linux commands: dd</ulink>
      </title>
      <para><emphasis role="bold">1. Introduction</emphasis></para>
      <para>What you&apos;re reading is only the first of the many articles from the &quot;Learning Linux commands&quot; series. Why would we want to do such a thing? Because it&apos;s useful to you to have every option and possible use of a widely used command all in one place. You will find some options or even some commands that you didn&apos;t even knew existed, and your life as a Linux user / admin will become easier. If you&apos;re not afraid of opening a terminal and know the basics of using a Linux system, this article is for you. If you seek further help or information consult manual pages or visit our new <ulink url="http://forum.linuxcareer.com/">Linux forum</ulink>. (...)</para>
<!-- ($ Id: 18.11.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://how-to.linuxcareer.com/c-development-on-linux-types-variables-operators">LinuxCareer.com/Rares Aioanei: C development on Linux - Types, variables, operators - III.</ulink>
      </title>
      <para><emphasis role="bold">1. Introduction</emphasis></para>
      <para>As <ulink url="http://how-to.linuxcareer.com/c-development-on-linux-comparison-between-c-and-other-programming-languages">promised</ulink>, starting with this part of our C development article, we will get started with learning, without further introduction. I couldn&apos;t find no better way to start other than this, because types, operators and variables are an essential part of C and you will use them all the time when writing your own programs. For example, you can write a simple C program without defining your own functions, but it&apos;s harder to do that without some variables, unless you wanna stick to &quot;Hello, world!&quot;. A variable is nothing more than a location in memory holding a value that can be altered (hence the name). But before you declare a variable you must know what kind of value you want it to hold, and here you will use types. And in order to <emphasis role="bold">
          <emphasis role="italic">operate</emphasis>
        </emphasis> on those variables, you&apos;ll need...operators, of course. I intend to make this course as concise as possible, so I recommend attention and as usual, practice. Any questions can be addressed on our <ulink url="http://forum.linuxcareer.com/">forums</ulink>, and we will do our best to answer them. (...)</para>
<!-- ($ Id: 17.11.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink url="http://www.howtoforge.com/serving-cgi-scripts-with-nginx-on-opensuse-11.4">HowtoForge/Falko Timme: Serving CGI Scripts With Nginx On OpenSUSE 11.4</ulink>
      </title>
      <para>This tutorial shows how you can serve CGI scripts (Perl scripts) with nginx on OpenSUSE 11.4. While nginx itself does not serve CGI, there are several ways to work around this. I will outline two solutions: the first is to proxy requests for CGI scripts to Thttpd, a small web server that has CGI support, while the second solution uses a CGI wrapper to serve CGI scripts.

(...)</para>
<!-- ($ Id: 17.11.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.ibm.com/developerworks/linux/library/l-lpic3-313-3/index.html">IBM developerWorks/Roderick W. Smith: Learn Linux, 302 (Mixed environments): Winbind</ulink>
      </title>
      <para>If your network includes a domain controller (either a Windows computer or a Samba server), you can use its user database instead of or in addition to maintaining local login users in a Linux computer&apos;s local account database. Doing so requires using a set of tools known as Winbind. This toolset can be handy even for Linux computers that don&apos;t run Samba to share files or printers; users with Windows domain accounts can log in at the console or use SSH to access Linux-only features, use POP or IMAP mail servers with Windows domain authentication, and so on. (...)</para>
<!-- ($ Id: 17.11.11 sat $)-->    </blockquote>
<!--
    <blockquote>
      <title>
        <ulink url="http://stick.gk2.sk/blog/2011/11/getting-ssh-fingerprints-for-machines-in-your-network/">Pavol Rusnak: Getting SSH fingerprints for machines in your network</ulink>
      </title>
      <para>Some time ago we were trying to get SSH fingerprints for all machines in our local
        network. Solution is not that straightforward, but itâ€™s not a rocket science either:
        <programlisting>
#!/bin/bash
tmpfile=$(mktemp)
for i in $(seq 2 254); do
    ssh-keyscan -t rsa,dsa,ecdsa 192.168.1.$i &gt; &gt; $tmpfile
    done
ssh-keygen -l -f $tmpfile
rm -f $tmpfile
        </programlisting>
      </para>
      <para>First, we retrieve the keys using ssh-keyscan, store them into temporary file and
        compute fingerprints afterwards using ssh-keygen. Or is there a less complex and more
        elegant solution?</para>
      <para>PS: Thanks <ulink url="http://administratosphere.wordpress.com/2011/05/28/getting-and-verifying-ssh-fingerprints/">David</ulink> for kicking in the right direction.</para>
    </blockquote> -->  </sect2>
</sect1>
