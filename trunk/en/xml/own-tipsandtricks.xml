<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title><ulink url="http://blog.martin-graesslin.com/blog/2011/03/proactive-spam-fighting-with-akonadi/">Martin Grässlin: Proactive Spam Fighting with Akonadi</ulink>
      </title>
      <para>One year ago I finished my Master Thesis and I just realized that I never really blogged about it. I had the chance to build my implementation during the Thesis upon the Akonadi framework, which is the reason why I want to share what I worked about. For all who might be more interested in my Thesis, a publisher was so kind to <ulink url="http://amzn.to/evh4lj">publish</ulink> it.</para>     
      <para>The title of my Thesis was "<emphasis role="bold">Implementation of Proactive Spam Fighting Techniques</emphasis>" and the Thesis covered the implementation of two orthogonal techniques. Both techniques shared the idea to eliminate Spam before it hits the user’s inbox. Current Spam fighting techniques like for example SpamAssassin are reactive. <ulink url="http://spamassassin.apache.org/">SpamAssassin</ulink> uses a rule based approach and a Bayesian filter. Rule based approaches cannot identify Spam messages reliable and have the danger to incorrectly mark ham messages if like last year <ulink url="https://issues.apache.org/SpamAssassin/show_bug.cgi?id=6269">the date grossly in the future becomes present</ulink>. Bayesian filtering requires to collect a rather large amount of mail messages before messages can be filtered. This illustrates that reactive Spam fighting is no real solution.</para>
      <para>Both implementations required to interact with the user’s inbox and in one case it was required to automatically send out mail on mail reception. The original idea of my tutors at the <ulink url="http://pi1.informatik.uni-mannheim.de/">Laboratory for Dependable Distributed Systems</ulink> was to develop either a plugin for Mozilla Thunderbird or Microsoft Outlook. With my background of KDE development I had to think of one framework which handles this much better: <ulink url="http://community.kde.org/KDE_PIM/Akonadi">Akonadi</ulink>. Thanks to Akonadi I was able to implement the solution in a client and platform independent way. Instead of just supporting Mozilla Thunderbird the solution works on all systems supporting Akonadi and no specific mail client is required. It can even be used by users who just use a web mail client. (...)</para>
      <!-- ($ Id: 07.3.11 sm $)-->        
    </blockquote>
    <blockquote>
      <title><ulink url="http://www.mohamedmalik.com/?p=897">Mohammed Malik: Adding Borders To Use Photos Using digiKam..</ulink>
      </title>
      <para>Many people add borders to there images, since they make the image look better and stands out unique and digiKam makes this very easy and simple!</para>
      <para>There are two ways to apply image borders in digiKam (...)</para>
      <!-- ($ Id: 7.3.11 sm $)-->    
    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://scribblesandsnaps.wordpress.com/2011/02/22/work-with-photo-metadata-in-digikam/">Scribbles and Snaps/Dmitri Popov: Photography and Open Source Work with Photo Metadata in digiKam</ulink>
      </title>
      <para>&quot;Inside each digital photo hides metadata in the <ulink url="http://en.wikipedia.org/wiki/Exif">EXIF</ulink>, <ulink url="http://en.wikipedia.org/wiki/IPTC_Information_Interchange_Model">IPTC</ulink>, or <ulink url="http://en.wikipedia.org/wiki/Extensible_Metadata_Platform">XMP</ulink> formats, and digiKam provides tools for viewing and editing this useful information.

</para>
      <para>For starters, digiKam’s main window features the dedicated <emphasis role="bold">Metadata</emphasis> sidebar which lets you view EXIF, Makernote, IPTC, and XMP metadata. You can switch between concise and full views as well as print the metadata, save them as a file, and copy them into the clipboard. (...)&quot;</para>
<!-- ($ Id: 5.3.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/utilities/exercise-6-set-variables-in-scripts/">BashShell.net/Mike: Exercise #6: Set Variables in Scripts</ulink>
      </title>
      <para>When you need to set variables, you can do that in the BEGIN section of an awk script. Here the variable firstuser is set to 1000. The BEGIN section sets that 
      variable and it is then used later in the script. (...)</para>
      <para><emphasis role="bold">Copyright:</emphasis><link linkend="extcopyright">3</link></para>
<!-- ($ Id: 01.3.11 sm $) -->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/script-of-the-week/log-parser/">BashShell.net/Mike: LogParser</ulink>
      </title>
      <para>The idea behind a log parser is to create a loop that will check all of your required logs to return information about specific needs that you may have as an 
        administrator. For example, with this script you may want to search a specific log for one or two text strings that are very important to the function of your 
        system.(...)</para>
      <para><emphasis role="bold">Copyright:</emphasis><link linkend="extcopyright">3</link></para>
<!-- ($ Id: 01.3.11 sm $) -->    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://python4kids.wordpress.com/2011/02/24/a-big-jar-of-pickles/">python4kids/Brandan Scott: A Big Jar of Pickle</ulink>
      </title>
      <para>In the last tutorial we learned how to pickle our objects.  Pickling is a way of storing the object (on the computer’s file system) so that it can be used later. 
        This means that if we want to re use an object we can simply save it and load it when we need it, rather than re-creating it each time we want to use it.  This is very 
        useful when our object is a list of questions for our trivia game.  We really only want to type the questions in once and then reload them later.</para>
      <para>Now we need to settle on a way to structure our data.  We saw in our earlier tutorial that each question was a list, and that the list itself had a certain 
        structure.  We also need to think about how a number of questions will be stored.  We will use a list to do that as well!  In this case we will have a list of questions. 
        Each of the elements in the list will itself be a list. Let’s build one. First we make an empty list to store all the questions: (...)</para>
<!-- ($ Id: 1.3.11 sm $) -->    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink url="http://www.ibm.com/developerworks/linux/library/l-lpic3-310-2/index.html">IBM developerWorks/Roderick W. Smith: Learn Linux, 302 (Mixed environments): Samba roles</ulink>
      </title>
      <para>&quot;Samba isn&apos;t a single program; rather, it&apos;s a series of interrelated servers and utilities, each of which has its own specific purpose. Understanding the differences between these servers and utilities will help you manage your Samba system. Furthermore, Samba implements a number of different security models, which you must understand to properly integrate Samba into an existing network or to set up a new network with Samba servers at its core. (...)&quot;</para>
<!-- ($ Id: 5.3.11 sat $) -->    </blockquote>
  </sect2>
</sect1>
