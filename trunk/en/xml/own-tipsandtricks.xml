<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"[
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://www.linuxjournal.com/content/working-frames-and-objects-scribus"
          >LinuxJournal/Bruce Byfield: Working with Frames and Objects in Scribus</ulink>
      </title>
      <para><quote>A Scribus document consists of a series of objects that are added to a page, and
          contained within a frame. In addition to the usual cut, copy, and paste functions
          available in most applications, frames in Scribus share a general set of editing
          attributes and, so far as possible, the same set of properties. As you can see from the
          Insert menu, Scribus supports four basic types of frame: <ulink
            url="http://www.linuxjournal.com/content/text-frames-scribus">text</ulink>, <ulink
            url="http://www.linuxjournal.com/content/working-images-scribus">image</ulink>, table
          and drawing primitives. Table frames are collections of individual text frames, which may
          be edited either as a group or as individual cells, while drawing primitives are
          sub-divided into shape, polygon, line, Bezier curve, and freehand line. Frames for
          primitives are added with the content, while the content of other frames must be added
          separately.</quote> (...)</para>
      <!-- ($ ld: 14.2.11 sm $) -->
    </blockquote>
    <blockquote>
      <title><ulink
          url="http://www.ibm.com/developerworks/linux/library/l-script-linux-desktop-2/index.html?ca=drs-"
          >IBMDeveloperWorks/Paul Ferrill: Scripting the Linux desktop, Part 2: Scripting
          Nautilus</ulink></title>
      <para>"<emphasis role="italic"><quote>This series of articles explores how to use Python to
            create scripts for the GNOME desktop, the screenlets framework, and Nautilus to deliver
            a highly productive environment. Scripts on the desktop enable drag-and-drop
            functionality and quick access to the information and services you commonly use. In this
            installment, learn how to use Python to add functionality to extend Nautilus on your
            desktop.</quote></emphasis></para>
      <para>For users of the GNOME desktop, the Nautilus program is probably one of the more
        frequently used applications. It handles all the file copying, moving, renaming, and
        searching chores with a simple graphical interface. At first blush, it would appear there
        aren't many file-related things Nautilus can't do—unless you start thinking about tasks you
        would typically perform with a shell script. </para>
      <para>The Nautilus developers provided several ways to add new functionality without breaking
        open the main code base. The simplest method is to use a bash or shell script that executes
        a series of commands you would usually perform from a terminal prompt. This method makes it
        possible to try the commands to make sure they do what you want them to do first. You can
        use other languages as well, including the C Scripting Language, GnomeBasic, Perl, and
        Python. This article look at adding new capabilities to Nautilus using the Python language.
        A basic understanding of the Python language and the Python Standard Library is assumed.
        "(...)</para>
      <!-- ($ ld: 17.2.11 sm $) -->
    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://www.freesoftwaremagazine.com/columns/getting_more_out_vim_some_tips"
          >FreeSoftwareMagazine/Ryan Cartwright: Getting more out of Vim - some tips</ulink>
      </title>
      <para>"I’m donning my flame-proof suit for this post. Vim is arguably one of the two most
        popular text-editors used in the free software world: built on vi (its name stands for
        VIiMproved) it will be found as a default package in many GNU/Linux distributions. The other
        popular editor is EMACS (although I am sure there are those who will argue that EMACS is
        much more than a mere text-editor). I use Vim a lot in my work and have found it to be a
        little like chess: a moment to learn a lifetime to master. With that in mind here are some
        of the tips and handy commands I have picked up over the years. I thought I’d pass them on
        in case they help. </para>
      <para>I’m going to assume you are familiar with the basics of Vim: moving the cursor, entering
        modes and adding/editing content. I’m also going to presume you know what entering a command
        that starts with a : means. This is not a beginners class, but it’s not an expert one
        either. This is not the place to begin learning Vim - sorry. Some of these were seemingly
        obvious to me, but unknown to other Vim users I’ve encountered. The rest are the reverse of
        that scenario. I’ve limited myself to ten, because honestly something like this go on
        forever without such a limit. These are not necessarily the best or most needed tips but
        they are the ones I found were best received by vim users when they first heard them
        (including me)." (...)</para>
      <!-- ($ ld: 15.2.11 sat $) -->
    </blockquote>
    <blockquote>
      <title><ulink url="http://azouhr.wordpress.com/2011/02/18/bash-features/">Berthold Gunreben:
          Bash Features</ulink></title>
      <para>"The bash system shell is the most widely used one on linux systems. For most sysadmins,
        it is the tool of choice to do small administrative tasks. There are of course other shells,
        and I don’t want to tell if one or the other is better. </para>
      <para>Even though it is so well known by many people, one can stumble over some interesting
        features from time to time. I used one of them to create the data in the recent post about
        Linux and Memory. The task was, to iterate over a number of different test cases, but also
        over different sizes for each test case. The first one is
        easy:<screen>for r in 1 2 3 4 5 6 7 8; do ./memxfer -s 32M 100 $r; done</screen></para>
      <para>You could also write this somewhat shorter
        as:<screen>for r in $(seq 1 8); do ./memxfer -s 32M 100 $r; done</screen></para>
      <para>My method of choice was using a not so well known bash
        feature:<screen>for r in {1..8}; do ./memxfer -s 32M 100 $r; done</screen></para>
      <para>The next step would be, to also iterate over sizes. All the sizes I normally use in this
        benchmark are powers of two, and I definitely do not want to write down all these numbers
        manually. Therefore, these numbers had to be calculated while iterating over the sizes. This
        can be done like
        this:<screen>for s in {0..16}; do ./memxfer -s $((1&lt;&lt;$s))k 100 1; done</screen></para>
      <para>Finally, after putting all together, the command looks like the
        following:<screen>for r in {0..8}; do
   for s in {0..16}; do
     ./memxfer -s $((1&lt;&lt;$s))k 100 $r
   done
done</screen></para>
      <para>Now back to those interesting curling bracket lists. It is obviously a very short method
        to create sequences of numbers. But they can do even more. For example, try the following
        command:<screen>echo hello{1..4}</screen></para>
      <para>The result is a combination of the list with the preceding
        string:<screen>hello1 hello2 hello3 hello4</screen></para>
      <para>This can also be done with letters like in<screen>echo hello{a..f}</screen></para>
      <para>and it is possible to combine several lists to get permutations or counting backwards:
        <screen>echo {a..c}{11..13}{z..w}</screen></para>
      <para>Just try it yourself. It is quite a nice thing. One last note: Sometimes, you want to
        use numbers that normally have a different digit count. To get the same number of digits for
        all of the numbers, it is interesting to add a number of leading zeros. The resolution to
        this is straight forward:<screen>echo {001..300}</screen></para>
      <para>"</para>
      <!-- ($ ld: 18.2.11 sat $) -->
    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://mindby.com/2011/02/celery-and-twisted/">Brent McConnell: Celery and
          Twisted</ulink>
      </title>
      <para>"I’ve been working with <ulink url="http://celeryproject.org/">Celery</ulink>, <ulink
          url="http://twistedmatrix.com/trac/">Twisted</ulink> and <ulink
          url="https://github.com/fiorix/cyclone">Cyclone</ulink> recently on a side project I have
        going on, however the integration between Celery and Twisted is not ideal for asynchronous
        programming which prompted me to jot down some notes for what I’ve worked out. Hopefully
        this will be useful to someone, also if anyone wants to offer a better way I’m all ears :) . </para>
      <para>Celery has some built in methods to allow you to check the completeness of a remote job
        by calling the successful() method on a returned AsyncResult object. For example you can do
        something like this…" (...)</para>
      <!-- ($ ld: 14.2.11 sm $) -->
    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink url="http://lizards.opensuse.org/2011/02/19/atiamd-fglrx-catalyst-for-opensuse/"
          >Bruno Friedmann: ATI/AMD fglrx 8.821 Catalyst 11.2 available for openSUSE 11.2, 11.3,
          11.4</ulink>
      </title>
      <para>"<emphasis role="bold"><emphasis role="underline">Preambule : free
          software</emphasis></emphasis>
      </para>
      <para><emphasis role="bold"><emphasis role="italic">Warning</emphasis>
        </emphasis></para>
      <para>I would notice everybody which will install these software : you will install
        proprietary softwares on your computer. Nobody will be able to debug them, nor help you to
        resolve what can be happen. That must be said !</para>
      <para><emphasis role="bold">The free future </emphasis></para>
      <para>The real future is already in place : it’s called radeon (or free-radeon), it’s fully
        integrated in kernel &amp; xorg. Actually ( for openSUSE 11.4, or openSUSE 11.3 with <ulink
          url="http://download.opensuse.org/repositories/Kernel:/stable/openSUSE_11.3/"
          >kernel-stable</ulink> + <ulink
          url="http://download.opensuse.org/repositories/X11:/XOrg/openSUSE_11.3/">X11 obs
          repo</ulink> ). Support for many chipset is in real progress even for the 6xxx series.
        Give it a try before using the proprietary software, report any bugs you find with it. Only
        your contributions can help and will make a real differences. Thanks for doing that !</para>
      <para><emphasis role="bold">Unofficial but working repository </emphasis></para>
      <para>I offer for those of you that for any reasons can’t use successfully the free-radeon
        drivers a repository where you will find the latest fglrx/catalyst drivers following the
        packaging policy made avalaible by AMD. Thanks to Sebastian Siebert ( check his blog ) to
        work in coordination with ati/amd and follow the catalyst packaging. His work allow us to
        have that driver available for openSUSE.</para>
      <para><emphasis role="bold"><emphasis role="italic">The quick how-to</emphasis>
        </emphasis></para>
      <para><emphasis role="bold"><emphasis role="underline">Adding the
          repository</emphasis></emphasis>
      </para>
      <para/>
      <para><emphasis role="bold">For openSUSE
        11.4</emphasis><screen>zypper ar -c -f -n "ATI/AMD fglrx non-official" http://linux.ioda.net/mirror/ati/openSUSE_11.4/ "ATI/AMD FGLRX"
</screen></para>
      <para><emphasis role="bold">For openSUSE
        11.3</emphasis><screen>zypper ar -c -f -n "ATI/AMD fglrx non-official" http://linux.ioda.net/mirror/ati/openSUSE_11.3/ "ATI/AMD FGLRX"</screen></para>
      <para><emphasis role="bold">For openSUSE
        11.2</emphasis><screen>zypper ar -c -f -n "ATI/AMD fglrx non-official" http://linux.ioda.net/mirror/ati/openSUSE_11.2/ "ATI/AMD FGLRX"
</screen></para>
      <para><emphasis role="bold"><emphasis role="underline">Installing the
          driver</emphasis></emphasis></para>
      <para><emphasis role="bold">Nota previous version</emphasis></para>
      <para>Due to change in ati/amd way of life, it’s recommanded to completely remove any version
        of fglrx previously installed with a zypper rm </para>
      <para>I can only recommand to also (as root)
        <screen># Remove old conf &amp; stuff
rm -fr /etc/ati
# Remove any old fglrx inside kernel modules
find /lib/modules -type f -iname "flgrx.ko" -exec rm -fv {} \;</screen></para>
      <para><emphasis role="bold">New installation</emphasis>
      </para>
      <para>Once the repo has been added, you will certainly have to reboot to get ride off free
        radeon module. At boot on the grub line
        add<screen>nomodeset blacklist=radeon 3</screen></para>
      <para>Don’t panic you will be land to a console, open it with root account to install fglrx.
        Search the software you want for example under openSUSE 11.4
        <screen>zypper se -s fglrx
Loading repository data...
Reading installed packages...

S | Name                  | Type    | Version | Arch   | Repository
--+-----------------------+---------+---------+--------+-----------
  | fglrx64_7_6_0_SUSE114 | package | 8.812-1 | x86_64 | ATI/AMD fglrx non-official
i | fglrx64_xpic_SUSE114  | package | 8.821-1 | x86_64 | ATI/AMD fglrx non-official
  | fglrx_7_6_0_SUSE114   | package | 8.812-1 | i586   | ATI/AMD fglrx non-official
  | fglrx_xpic_SUSE114    | package | 8.821-1 | i586   | ATI/AMD fglrx non-official</screen></para>
      <para>Starting with 8.821 (Catalyst 11.2) ATI use now xpic (full explanation) So use that
        one.</para>
      <para><emphasis role="bold">For a 64bits
        version</emphasis><screen>zypper in fglrx64_xpic_SUSE114</screen></para>
      <para><emphasis role="bold">For a 32bits
        version</emphasis><screen>zypper in fglrx_xpic_SUSE114</screen></para>
      <para>During the installation process, all the dependencies will be added, which mostly are
        needed to build the kernel modules. Expect around 200MB to dowload. </para>
      <para>Then the installer will build the module for your installed kernel. And if there’s a
        kernel update, the script will automagically detect that, and will rebuild the module for
        the new kernel installed. (So if you find that your workstation is slow on reboot just press
        the esc key to see the details … )</para>
      <para><emphasis role="bold">Preparing xorg to use fglrx </emphasis></para>
      <para>Once the module is build and installed, you should have a file fglrx.conf or
        50-fglrx.conf in
        /etc/modprobe.d<screen>cat /etc/modprobe.d/50-fglrx.conf
blacklist radeon</screen></para>
      <para>Next ati recommend to use ati –initial-config but that break the auto-detect stack of
        xorg. So I recommend changing one line in file /etc/X11/xorg.conf.d/50-device.conf </para>
      <para>just change driver line to driver “fglrx” </para>
      <para>All the rest of the setup (double screen etc) will be made lately with the ati catalyst
        control center (command is amdcccle). </para>
      <para>For those of you which want to have an xorg.conf file just have a look at aticonfig
        –help command.</para>
      <para><emphasis role="bold">Start X</emphasis>
      </para>
      <para>If you are inside the console we start to use before just run “init 5″ to start xorg,
        and normally you will find your normal xorg login screen (kdm, gdm, ldm, xdm). Hit
        ctrl+alt+f1 to return to the console and type exit or logout or ctrl+d to close it. then
        ctrl+alt+f7 to return to the xorg session.</para>
      <para><emphasis role="bold">Updates </emphasis></para>
      <para>ati/amd catalyst are release on a month basis, but this vary from 3 weeks to 8 weeks.<itemizedlist>
          <listitem>
            <para> Catalyst 11.2 – fglx 8.821 : 14 February 2011 </para>
          </listitem>
        </itemizedlist></para>
      <para><emphasis role="bold">References </emphasis><itemizedlist>
          <listitem>
            <para><ulink
                url="http://www.sebastian-siebert.de/2011/02/15/opensuse-11-3-proprietaeren-grafik-treiber-ati-catalyst-11-2-als-rpm-installieren/"
                >Sebastian Siebert blog ( German )</ulink> with nice howto and problem
              resolution.</para>
          </listitem>
          <listitem>
            <para><ulink url="http://lizards.opensuse.org/?p=4673">My previous post on the
                subject</ulink> "</para>
          </listitem>
        </itemizedlist></para>
      <!-- ($ ld: 20.2.11 sm $) -->
    </blockquote>
    <blockquote>
      <title><ulink url="http://ironman.darthgibus.net/?p=113">Fred Blaise: Alfresco 3.4d ldap
          sync</ulink></title>
      <para>While upgrading from 3.3g to 3.4d, my ldap sync wouldn’t work anymore. </para>
      <para>I had to add in my ldap-ad-authentication.properties the following
        line:<screen>ldap.synchronization.java.naming.security.authentication=simple</screen></para>
      <para>While there is a similar line for authentication, it doesn’t do it for sync’ing
        up.<screen>ldap.authentication.java.naming.security.authentication=simple</screen></para>
      <!--($ ld: 22.2.11 sm $)-->
    </blockquote>
  </sect2>
</sect1>
