<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://www.mygnulinux.com/?p=1117">mygnulinux.com/tetris4: Remotely manage your KDE system from your Android Phone</ulink>
      </title>
      <para>To achieve this, you are going to need a VNC server running on the host computer, and a VNC viewer running on your Android phone. This may sound complicated to some, but its really easy. Just follow this simple how-to! :) (...)</para>
<!-- ($ Id: 8.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.brighthub.com/hubfolio/matthew-casperson/blog/archive/2011/07/03/installing-android-x86-in-virtualbox.aspx">Hubfolio/Matthew Casperson: Installing Android x86 in VirtualBox</ulink>
      </title>
      <para>In a <ulink url="http://www.brighthub.com/hubfolio/matthew-casperson/blog/archive/2011/06/27/running-android-apps-on-linux.aspx">previous post</ulink> I showed you how to install and configure the Android SDK emulator to boot up quickly. What you may have found out by now is that the emulator is slow. In fact it is only any good if you have the kind of PC that can render the entire Transformers movie in a few minutes.</para>
      <para>If you are just interested in running Android applications on your desktop PC, a project called <ulink url="http://www.android-x86.org/">Android x86</ulink> provides a copy of the Android operating system compiled for x86 processors. The latest release is Android 2.2, which is a little bit behind Honeycomb (Android 3), but is still capable of running almost all Android applications. (...)</para>
<!-- ($ Id: 8.7.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/shell-scripts/understanding-functions/">BashShell.net/mike: Understanding Functions</ulink>
      </title>
      <para>A function can help you modularize your script.  Because the function is executed in the context of the same shell, it does not create a new child process, this makes functions faster as they access the information in RAM.  This also will save on resources as you use functions.  Functions are a script within a script which can be defined by the user and stored in memory, allowing you to reuse the function repeatedly.  This also provides  a modular aspect that allows you to debug one function at a time be disabling functions. (...)</para>
<!-- ($ Id: 8.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://linuxaria.com/howto/the-dd-command-on-linux-terminal?lang=en">Linuxaria/linuxari: The dd command on Linux terminal.</ulink>
      </title>
      <para>dd seem an unfriendly command, but if you start to use it, you’ll see that it’s a powerful command able to do many different things, backup a partition, CD or USB stick for example or do some simple tests on the speed of your disks or your CPU. (...)</para>
<!-- ($ Id: 8.7.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://olex.openlogic.com/wazi/2011/migrate-from-svn-to-git-easily-with-git-svn/">Wazi/Juliet Kemp: Migrate from SVN to Git easily with git-svn</ulink>
      </title>
      <para>So, you’re interested in trying out <ulink url="http://olex.openlogic.com/packages/git">Git</ulink> – or you’ve even tried it for your own private projects and liked it – but at work, the existing repositories all use <ulink url="http://olex.openlogic.com/packages/subversion">Subversion</ulink>. Maybe you plan to switch over to Git, but you want a commitment-free tryout before you take the plunge and switch wholesale. Fear not: git-svn is here to help you. (...)</para>
<!-- ($ Id: 8.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://drdobbs.com/tools/231000894">Dr. Dobb&apos;s/Stefan Wörthmüller: Introducing Multithreading to Mature Desktop Applications</ulink>
      </title>
      <para><emphasis role="bold">A crash course tutorial</emphasis></para>
      <para>Today, all programs must parallelize tasks if they are to enjoy the power available through multicore processors. Until recently, though, parallel programming was the domain of server programmers and their scientific counterparts. Now, programmers from other domains are faced with the problem of migrating existing applications from serial to multithreaded architectures.</para>
      <para>The good news is that you do not have to migrate your whole application. The migration can be done step by step, and a large portion of the code does not need to be migrated at all: Most programs spend 80 to 90 percent of their runtime in 5 to 10 percent of their code. If your application has 100,000 lines of code, it&apos;s probably sufficient to parallelize 5,000 to 10,000 lines to get most of the lift of parallelism. Still, that&apos;s a lot of work.</para>
      <para>This article shows how to introduce multithreading to mature desktop applications written in C and C++. These applications usually have some attributes that make it more difficult to introduce multithreading: They often consist of old code with many nooks and crannies whose functions are undocumented and unknown, or they are GUI applications with a single main thread. Let&apos;s explore how to migrate these applications. (...)</para>
    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink url="http://suse.gansert.net/?p=239">Uwe Gansert: Unattended Upgrade with AutoYaST</ulink>
      </title>
      <para>Today I want to introduce a new feature of SLES11 SP2. Usually you use AutoYaST to do fresh installations of a system including formatting the partitions and do all kind of new-system configuration in your AutoYaST XML.
With SLES11 SP2 you’ll have the option of doing unattended upgrades of a previously installed systems too.</para>
      <para>Imagine you have a running SLES10 SP4 and want to upgrade it now to SLES11 SP2 with AutoYaST, what are the steps to do that? (...)</para>
<!-- ($ Id: 10.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.techrepublic.com/blog/opensource/how-to-remove-duplicate-files-without-wasting-time/2667">TechRepublic/Marco Fioretti: How to remove duplicate files without wasting time</ulink>
      </title>
      <para>Duplicate files can enter in your computer in many ways. No matter how it happened, they should be removed as soon as possible. Waste is waste: why should you tolerate it? It’s not just a matter of principle: duplicates make your backups, not to mention indexing with Nepomuk or similar engines, take more time than it’s really necessary. So let’s get rid of them. (...)</para>
<!-- ($ Id: 8.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.linuxjournal.com/content/safer-access-without-passwords">Linux Journal/Johan Thelin: Safer Access without Passwords</ulink>
      </title>
      <para>How do you make sure that your passwords are safe? You can make them longer, complicate them by adding odd characters, making sure to use different passwords for each user account that you have. Or, you can simply skip them all together.</para>
      <para>The secure shell, ssh, is a key tool in any Linux user&apos;s toolbox. As soon as you have more than one machine to interact with, ssh is the obvious choice. (...)</para>
<!-- ($ Id: 8.7.11 sat $)-->    </blockquote>
  </sect2>
</sect1>
