<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://www.linuxjournal.com/content/working-frames-and-objects-scribus"
          >LinuxJournal/Bruce Byfield: Working with Frames and Objects in Scribus</ulink>
      </title>
      <para><quote>A Scribus document consists of a series of objects that are added to a page, and
          contained within a frame. In addition to the usual cut, copy, and paste functions
          available in most applications, frames in Scribus share a general set of editing
          attributes and, so far as possible, the same set of properties. As you can see from the
          Insert menu, Scribus supports four basic types of frame: <ulink
            url="http://www.linuxjournal.com/content/text-frames-scribus">text</ulink>, <ulink
            url="http://www.linuxjournal.com/content/working-images-scribus">image</ulink>, table
          and drawing primitives. Table frames are collections of individual text frames, which may
          be edited either as a group or as individual cells, while drawing primitives are
          sub-divided into shape, polygon, line, Bezier curve, and freehand line. Frames for
          primitives are added with the content, while the content of other frames must be added
          separately.</quote> (...)</para>
      <!-- ($ ld: 14.2.11 sm $) -->
    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://www.freesoftwaremagazine.com/columns/getting_more_out_vim_some_tips"
          >FreeSoftwareMagazine/Ryan Cartwright: Getting more out of Vim - some tips</ulink>
      </title>
      <para>"I’m donning my flame-proof suit for this post. Vim is arguably one of the two most
        popular text-editors used in the free software world: built on vi (its name stands for
        VIiMproved) it will be found as a default package in many GNU/Linux distributions. The other
        popular editor is EMACS (although I am sure there are those who will argue that EMACS is
        much more than a mere text-editor). I use Vim a lot in my work and have found it to be a
        little like chess: a moment to learn a lifetime to master. With that in mind here are some
        of the tips and handy commands I have picked up over the years. I thought I’d pass them on
        in case they help. </para>
      <para>I’m going to assume you are familiar with the basics of Vim: moving the cursor, entering
        modes and adding/editing content. I’m also going to presume you know what entering a command
        that starts with a : means. This is not a beginners class, but it’s not an expert one
        either. This is not the place to begin learning Vim - sorry. Some of these were seemingly
        obvious to me, but unknown to other Vim users I’ve encountered. The rest are the reverse of
        that scenario. I’ve limited myself to ten, because honestly something like this go on
        forever without such a limit. These are not necessarily the best or most needed tips but
        they are the ones I found were best received by vim users when they first heard them
        (including me)." (...)</para>
      <!-- ($ ld: 15.2.11 sat $) -->
    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://mindby.com/2011/02/celery-and-twisted/">Brent McConnell: Celery and
          Twisted</ulink>
      </title>
      <para>"I’ve been working with <ulink url="http://celeryproject.org/">Celery</ulink>, <ulink
          url="http://twistedmatrix.com/trac/">Twisted</ulink> and <ulink
          url="https://github.com/fiorix/cyclone">Cyclone</ulink> recently on a side project I have
        going on, however the integration between Celery and Twisted is not ideal for asynchronous
        programming which prompted me to jot down some notes for what I’ve worked out. Hopefully
        this will be useful to someone, also if anyone wants to offer a better way I’m all ears :) . </para>
      <para>Celery has some built in methods to allow you to check the completeness of a remote job
        by calling the successful() method on a returned AsyncResult object. For example you can do
        something like this…" (...)</para>
      <!-- ($ ld: 14.2.11 sm $) -->
    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink
          url="http://www.serverwatch.com/tutorials/article.php/3924816/Use-Logger-to-Write-Messages-to-Log-Files.htm"
          >internet.com/Joe Brockmeier: Use Logger to Write Messages to Log Files</ulink>
      </title>
      <para>"Want a quick and easy way to write to system logs? Check out logger, a shell utility
        that works with syslog. </para>
      <para>The logger utility is part of the bsdutils package on Debian-based systems and the
        util-linux-ng package on Fedora (and presumably Red Hat Enterprise Linux, although I don't
        have a RHEL system handy to check). It should be installed by default. </para>
      <para>The most common use for logger is as a lightweight way to pass messages from a script to
        logfiles. Say you've got a backup script or another job that runs while you're home
        snoozing. Rather than having the script send an email and clog up your inbox, you can add
        logger to your script, and check periodically, at your leisure, to make sure things went as
        planned -- or use logger to just log error messages when the job doesn't run as planned or
        encounters an error." (...)</para>
      <!-- ($ ld: 15.2.11 sm $) -->
    </blockquote>
  </sect2>
</sect1>
