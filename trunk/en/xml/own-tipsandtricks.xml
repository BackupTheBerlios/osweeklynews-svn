<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://ubuntumanual.org/posts/344/five-cool-kde-widgets-for-your-desktop"
          >UbuntuManual: Five cool KDE widgets for your desktop! </ulink>
      </title>
      <para>With all the hype around Unity and Gnome 3, KDE fans might be having a lousy time and
        feel ignored. We are bored with those two anyway ;-). Its time for a change. KDE fans
        rejoice!! KDE has many very cool and useful widgets which you can add on your KDE desktop or
        in your taskbar. Lets have a look at the top 5 widgets. (...)</para>
      <!-- ($ Id: 30.5.11 sm $)-->
    </blockquote>
    <blockquote>
      <title><ulink
          url="http://www.tricksmachine.com/2011/05/4-things-to-do-after-you-install-kde.html"
          >Tricksmachine/Vishal Gaikar: 4 Things to Do After You Install KDE</ulink></title>
      <para><emphasis role="bold">KDE</emphasis> is a free and <ulink
          url="http://www.tricksmachine.com/tag/open-source">open source</ulink> desktop workspace,
        application suite, and development environment for Unix-like operating systems such as
        Linux. Its applications are also available for <ulink
          url="http://www.tricksmachine.com/tag/mac-os-x">Mac OS X</ulink> and <ulink
          url="http://www.tricksmachine.com/category/computer-tricks">Windows</ulink>. One of the
        most impressive features of KDE is its flexibility. You can customize KDE to look and feel
        however you want.</para>
      <para>The KDE workspace is a unique experience not found with any other desktop environment or
          <ulink url="http://www.tricksmachine.com/tag/operating-system">operating system</ulink>.
        It is called Plasma and is fully integrated with a widget system and is easily themeable.
        When you first install KDE, it will already look beautiful, but half of the fun of a free
        and open source workspace is tweaking. These are simple customizations you can do to make
        your KDE desktop truly yours. (...)</para>
      <!--($ Id: 31.5.11 sm $)-->
    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://www.phacks.net/how-to-use-gnu-screen/">pHacks/Pietra Armaga: How to Use GNU Screen</ulink>
      </title>
      <para>On UNIX, GNU Screen is a utility that i cannot live without. I know many console users share the same point of view with me.</para>
      <para>What is GNU Screen? it is a terminal multiplexer and you can run multiple console-based applications simultaneously. The best part of it is that you can leave it running on remote machines and come back to pick up your console sessions. It’s like VNC or Remote Desktop but for UNIX console. As you know that on UNIX if you run something on a shell and you got disconnected from it then your sessions will also stop. All work will be gone. (...)</para>
<!-- ($ Id: 27.5.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://log.or.cz/?p=156">Petr Baudis: brmd: A Case for POE</ulink>
      </title>
      <para>In <ulink url="http://brmlab.cz/">brmlab</ulink>, we want to <ulink url="http://brmlab.cz/project/brmdoor">track</ulink> who is unlocking the space, whether
        someone is inside, have some good visual indicator that <ulink url="http://brmlab.cz/project/presentationcenter">live stream</ulink> is on air, and so
        on. In other words, we have an Arduino with some further hardware, and we want to show
        whatever is reported by the Arduino on IRC and <ulink url="http://nat.brmlab.cz/brmd/">web</ulink>, and provide some web-based control (open/closed status override) in the
        opposite direction too.</para>
      <para>What to use for a service (we call it brmd) that will bind all these interfaces
        together? It just needs a lot of boring frontends and simple state maintenance. </para>
      <para>It turns out that Perl’s <ulink url="http://poe.perl.org/">POE</ulink> framework is
        ideal for this – most of the code for IRC, HTTP and device read/write is already there, so
        you just grab the modules, slam them together and you have exactly what you need with
        minimal effort. Right?It turns out that there are caveats – basically, the idea is correct,
        aside of getting stuck on a single stupidity of mine, I’d have the whole thing put together
        in something like half an hour. Unfortunately, the moment you want robustness too, things
        are getting a lot more complex; to handle the device disappearing, IRC disconnections, not
        having HTTP socket fds leak away, etc., you suddenly need to either magically know what
        further modules to hook up or start exeting some manual effort. Still, I like how POE is
        making it so easy to give a simple state machine many input/output interfaces and when you
        get used to the idiosyncracies, you can even make it somewhat reliable. (...)</para>
<!-- ($ Id: 26.5.11 sm $)-->    </blockquote>
    <blockquote>
      <title><ulink url="http://log.or.cz/?p=177">Petr Baudis: Repairing git cherry-pick authorship
          information</ulink></title>
      <para>I spent just my last night going through few months worth of patches and cherry-picking
        the bugfixy ones to <ulink url="http://sourceware.org/glibc/wiki/Release/2.11">glibc’s
          release/2.11/master</ulink>. But I was tired and didn’t pay attention to git’s messages,
        so at the end of the evening, I noticed that for all conflicting patches, I have done git
        commit -a instead of git commit -a -c commitid. This had a definite advantage since the
        “(cherry picked from commit …)” notices inserted by git cherry-pick -x got preserved, but
        also a very definitive problem – the author name and date info for each commit was
        wrong.</para>
      <para>(Note that AIUI, 1.7.5 cherry-pick might not have this problem anymore. I’m still using
        1.7.4, content with Debian’s packaged version nowadays.)</para>
      <para>Due to the -x lines, we still have mapping to original history. Therefore, some
        scripting should fix this quickly. And sure enough…! Maybe this recipe will come useful to
        someone:<programlisting>git filter-branch --commit-filter'
  if [ "$GIT_AUTHOR_NAME" = "Petr Baudis" ]; then
    # Author of this commit is wrong! We could also simply correct
    # all commits containing the "cherry picked" notice.
    cat &gt;/tmp/logm$$ # save log message
    ocommit="$(sed -n '\''s/^(cherry picked from commit \(.*\))$/\1/p'\'' &lt;/tmp/logm$$)"
    # Load original authorship information:
    IFS=: read GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_AUTHOR_DATE \
        &lt;&lt;&lt;"$(git log -1 --pretty=format:"%an:%ae:%at" $ocommit)"
    # Redo the commit:
    export GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_AUTHOR_DATE
    git commit-tree "$@" &lt;/tmp/logm$$
    rm /tmp/logm$$
else
    git commit-tree "$@" # preserve commit intact
fi' c55cc45ed76603b380489ee8c91ab5dce92e92f1..HEAD</programlisting></para>
      <para>Note that this requires that /bin/sh is bash (which may NOT be the case on debian!).
        Otherwise, you need to rewrite the &lt;&lt;&lt; bit.</para>
      <para>The c55cc45ed… commit is the first wrong cherry-pick. You may omit that altogether if
        you wish but the complete branch history is going to be rewritten. Also note that you should
        never rewrite commits that are already pushed out to a public place.</para>
      <!-- ($ Id: 28.5.11 sm $)-->
    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink
          url="http://www.phocean.net/2011/05/28/headphones-not-muting-the-speakers-with-a-gigabyte-motherboard.html"
          >Jean-Christophe Baptiste: Headphones not muting the speakers with a Gigabyte
          motherboard</ulink>
      </title>
      <para>It had been months since I had an weired issue with the embedded audio controller of my
        Gigabyte motherboard.</para>
      <para>Plugin the headphones on the front panel of my box didn’t mute the output to the
        speakers, which nullified the purpose of having headphones.</para>
      <para>I long thought that it was some hardware issue that I would have to sort some day by
        opening the box and checking the connections.</para>
      <para>Yesterday, I decided to solve it for good and I started to google… and found out that it
        was a pure software issue!</para>
      <para>The culprit sounded to be some unproper settings of the ALSA module and this <ulink
          url="https://help.ubuntu.com/community/HdaIntelSoundHowto">Ubuntu guide</ulink> just saved
        me.</para>
      <para>I carefully followed the steps and it appeared that for my <ulink
          url="http://www.gigabyte.com/products/product-page.aspx?pid=3258">Gigabyte
          GA-790FXTA-UD5</ulink>, it was necessaryýto this line:</para>
      <programlisting>add options snd-hda-intel model=3stack-hp</programlisting>
      <para>to</para>
      <programlisting>/etc/modprobe.d/alsa-base.conf</programlisting>
      <para>Ok, it did not go so smoothly as I picked out randomly models from the list until I find
        the right one (I had no idea of what was embbeded on my board). I hope this may help, as I
        have quite a lot of people with similar issues with all kinds of vendors.</para>
<!-- ($ Id: 30.5.11 sm $)-->    </blockquote>
    <blockquote>
      <title><ulink
          url="http://dominique.leuenberger.net/blog/2011/05/how-to-fix-brp-and-rpmlint-warnings-%E2%80%93-today-i-statement-might-be-overflowing-a-buffer-in-strncat/"
          >Dominique Leuenberger: how to fix brp and rpmlint warnings – today: I: Statement might be
          overflowing a buffer in strncat.</ulink></title>
      <para>Malcolm Lewis sent me a link to one of his failing packages, with the idea to bring the
        next post for this series (which has had a too long break already). So Malcolm: Thank you
        for the heads up and here we go with another hopefully helpful solution to one of brp error
        (brp actually stands for Build Root Policy)</para>
      <para>So, just like before, we have a look at the error, including the specific code parts
        raising the errors:</para>
      <blockquote>
        <para>I: Statement might be overflowing a buffer in strncat. Common mistake:</para>
        <para> BAD: strncat(buffer,charptr,sizeof(buffer)) is wrong, it takes the left over size as
          3rd argument</para>
        <para> GOOD: strncat(buffer,charptr,sizeof(buffer)-strlen(buffer)-1) </para>
      </blockquote>
      <para>Ok, so the error is very helpful with even telling us what is a bad use of strncat and
        what a good use of it would look like. For completeness, let’s see what the compiler itself
        reports on this error:</para>
      <blockquote>
        <para>In function ‘strncat’,</para>
        <para> inlined from ‘gtkui_icmp_redir’ at ec_gtk_mitm.c:173:14:</para>
        <para> /usr/include/bits/string3.h:152:3: warning: call to __builtin___strncat_chk might
          overflow destination buffer [enabled by default] </para>
      </blockquote>
      <para>Let’s see what <emphasis role="bold"><ulink url="http://linux.die.net/man/3/strncat">man
            3 strncat</ulink></emphasis> tells us about the usage of strncat.</para>
      <blockquote>
        <para><emphasis role="bold">Synopsis</emphasis></para>
        <para>#include char *strcat(char *dest, const char *src); char *strncat(char *dest, const
          char *src, size_t n);</para>
        <para><emphasis role="bold">Description</emphasis></para>
        <para> The strcat() function appends the src string to the dest string overwriting the ‘\0′
          character at the end of dest, and then adds a terminating ‘\0′ character. The strings may
          not overlap, and the dest string must have enough space for the result.</para>
        <para>The strncat() function is similar, except that it will use at most n characters from
          src. Since the result is always terminated with ‘\0′, at most n+1 characters are written.
        </para>
      </blockquote>
      <para>The package suggested by Malcolm contains this code (snipped together):</para>
      <para>#define PARAMS_LEN 50 static char params[PARAMS_LEN];</para>
      <para> strncat(params, gtk_entry_get_text(GTK_ENTRY(entry1)), PARAMS_LEN); strncat(params,
        "/", PARAMS_LEN); strncat(params, gtk_entry_get_text(GTK_ENTRY(entry2)), PARAMS_LEN);</para>
      <para>This is not an uncommon error at all. We create a buffer, 50 chars long, we concatenate
        text into the buffer and specify a max length of PARAMS_LEN. What is not taken into account
        here is that the string in params is getting longer, and we do not account for this when
        adding text to it. And additionally the leading \0 is ignored as well.</para>
      <para>Translating the BRP Result’s suggestion stating how we should write this code, we will
        result in this:</para>
      <para>#define PARAMS_LEN 50 static char params[PARAMS_LEN];</para>
      <para> strncat(params, gtk_entry_get_text(GTK_ENTRY(entry1)),
        sizeof(params)-strlen(params)-1); strncat(params, "/", sizeof(params)-strlen(params)-1);
        strncat(params, gtk_entry_get_text(GTK_ENTRY(entry2)),
        sizeof(params)-strlen(params)-1);</para>
      <para>sizeof(params) is what we had there before, and equals to PARAMS_LEN. But we now also
        take into account that we already do have some characters stored in params and also account
        for a trailing NULL byte.</para>
      <para>And with this simple fix, the error vanished.</para>
      <!--($ Id: 30.5.11 sm $)-->
    </blockquote>
  </sect2>
</sect1>
