<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://scribblesandsnaps.wordpress.com/2011/07/11/process-photos-with-digikams-batch-queue-manager-and-a-bash-script/">Scribbles and Snaps: Process Photos with digiKam’s Batch Queue Manager and a Bash Script</ulink>
      </title>
      <para>One of digiKam’s lesser known features is the ability to link scripts to notifications. At first sight, this may seem like a rather obscure functionality, but it can be put to some clever uses. Say, you want to keep a portfolio of selected photos on a mobile device. Resizing multiple photos to a specified size to make it easier to view them on the mobile device and transferring the processed photos from digiKam to the mobile device manually is not very practical. And this is where the ability to trigger scripts via notifications can come in handy. You can attach a simple Bash script to the Batch <emphasis role="italic">queue completed</emphasis> notification, so it’s triggered automatically when the Batch Queue Manager tool is done processing photos. (...)</para>
<!-- ($ Id: 15.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.howtoforge.com/enabling-compiz-fusion-on-an-opensuse-gnome-11.4-desktop-nvidia-geforce-8100">HowtoForge/Falko Timme: Enabling Compiz Fusion On An OpenSUSE GNOME 11.4 Desktop (NVIDIA GeForce 8100)</ulink>
      </title>
      <para>This tutorial shows how you can enable <ulink url="http://www.compiz-fusion.org/">Compiz Fusion</ulink> on an OpenSUSE 11.4 GNOME desktop (the system must have a 3D-capable graphics card - I&apos;m using an NVIDIA GeForce 8100 here). With Compiz Fusion you can use beautiful 3D effects like wobbly windows or a desktop cube on your desktop. (...)</para>
<!-- ($ Id: 15.7.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/shell-scripts/alter-your-environment-with-functions/">BashShell.net/mike: Alter Your Environment with Functions</ulink>
      </title>
      <para>You can use functions to alter the environment of the user.  These functions can be added into the .bash_profile of an individual user or in the system wide /etc/profile.  It is best to verify the functions have no detrimental impact by using a normal user first as a test base.  You will need to enter the functions in the .bash_profile in the following format.  In this example two functions have been used and can be called with “dfh” or “duh”. (...)</para>
<!-- ($ Id: 15.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/shell-scripts/using-functions-in-a-library/">BashShell.net/mike: Using Functions in a Library</ulink>
      </title>
      <para>Function Library</para>
      <para>Another way of using functions is when you create more complicated scripts is to create functions that you place in a library so that you can source them from other scripts.    These library functions can be called from a script using “source” or the “dot” command. (...)</para>
<!-- ($ Id: 15.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.linuxnov.com/command-line-du-disk-usage-commands-tips/">LinuxNov: Command Line | du Disk Usage Commands | Tips</ulink>
      </title>
      <para>du is a disk usage command allows you to easily know file and directory sizes, also you can view file and directory sizes decreasing starting by biggest file, otherwise increasing by smallest file. (...)</para>
<!-- ($ Id: 15.7.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://olex.openlogic.com/wazi/2011/migrate-from-svn-to-git-easily-with-git-svn/">Wazi/Juliet Kemp: Migrate from SVN to Git easily with git-svn</ulink>
      </title>
      <para>So, you’re interested in trying out <ulink url="http://olex.openlogic.com/packages/git">Git</ulink> – or you’ve even tried it for your own private projects and liked it – but at work, the existing repositories all use <ulink url="http://olex.openlogic.com/packages/subversion">Subversion</ulink>. Maybe you plan to switch over to Git, but you want a commitment-free tryout before you take the plunge and switch wholesale. Fear not: git-svn is here to help you. (...)</para>
<!-- ($ Id: 8.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://drdobbs.com/tools/231000894">Dr. Dobb&apos;s/Stefan Wörthmüller: Introducing Multithreading to Mature Desktop Applications</ulink>
      </title>
      <para><emphasis role="bold">A crash course tutorial</emphasis></para>
      <para>Today, all programs must parallelize tasks if they are to enjoy the power available through multicore processors. Until recently, though, parallel programming was the domain of server programmers and their scientific counterparts. Now, programmers from other domains are faced with the problem of migrating existing applications from serial to multithreaded architectures.</para>
      <para>The good news is that you do not have to migrate your whole application. The migration can be done step by step, and a large portion of the code does not need to be migrated at all: Most programs spend 80 to 90 percent of their runtime in 5 to 10 percent of their code. If your application has 100,000 lines of code, it&apos;s probably sufficient to parallelize 5,000 to 10,000 lines to get most of the lift of parallelism. Still, that&apos;s a lot of work.</para>
      <para>This article shows how to introduce multithreading to mature desktop applications written in C and C++. These applications usually have some attributes that make it more difficult to introduce multithreading: They often consist of old code with many nooks and crannies whose functions are undocumented and unknown, or they are GUI applications with a single main thread. Let&apos;s explore how to migrate these applications. (...)</para>
    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink url="http://suse.gansert.net/?p=239">Uwe Gansert: Unattended Upgrade with AutoYaST</ulink>
      </title>
      <para>Today I want to introduce a new feature of SLES11 SP2. Usually you use AutoYaST to do fresh installations of a system including formatting the partitions and do all kind of new-system configuration in your AutoYaST XML.
With SLES11 SP2 you’ll have the option of doing unattended upgrades of a previously installed systems too.</para>
      <para>Imagine you have a running SLES10 SP4 and want to upgrade it now to SLES11 SP2 with AutoYaST, what are the steps to do that? (...)</para>
<!-- ($ Id: 10.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.techrepublic.com/blog/opensource/how-to-remove-duplicate-files-without-wasting-time/2667">TechRepublic/Marco Fioretti: How to remove duplicate files without wasting time</ulink>
      </title>
      <para>Duplicate files can enter in your computer in many ways. No matter how it happened, they should be removed as soon as possible. Waste is waste: why should you tolerate it? It’s not just a matter of principle: duplicates make your backups, not to mention indexing with Nepomuk or similar engines, take more time than it’s really necessary. So let’s get rid of them. (...)</para>
<!-- ($ Id: 8.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.linuxjournal.com/content/safer-access-without-passwords">Linux Journal/Johan Thelin: Safer Access without Passwords</ulink>
      </title>
      <para>How do you make sure that your passwords are safe? You can make them longer, complicate them by adding odd characters, making sure to use different passwords for each user account that you have. Or, you can simply skip them all together.</para>
      <para>The secure shell, ssh, is a key tool in any Linux user&apos;s toolbox. As soon as you have more than one machine to interact with, ssh is the obvious choice. (...)</para>
<!-- ($ Id: 8.7.11 sat $)-->    </blockquote>
  </sect2>
</sect1>
