<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://www.freesoftwaremagazine.com/columns/creating_moving_story_reel_shot_inkscape_and_blender">FreeSoftwareMagazine/Terry Hancock: Creating a moving story-reel shot with Inkscape and Blender</ulink>
      </title>
      <para>There’s a reason they’re called “movies.” They’re supposed to move. Your eyes are keyed to follow motion, and the constant revelation of new information in a moving shot holds your interest longer. Thus, while four seconds might be about the maximum comfortable length for a static shot, shots in which the camera or subject are moving extensively can often last more than a minute without feeling slow at all. Storyboards made entirely from static images make it hard to judge active shots. It’s useful, therefore, to be able to insert some movement at the storyboard phase by panning and zooming a drawing. Here I’m going to demonstrate such an animated storyboard using Inkscape and Blender. (...)</para>
<!-- ($ ld: 15.1.11 sat $) -->    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/bash-shell/using-pipes-in-the-bash-shell/">BashShell.net: Using Pipes in the Bash Shell</ulink>
      </title>
      <para>The usage of pipes with the shell is easy and powerful.  This lab will help you understand the use of pipes. (...)</para>
<!-- ($ ld: 15.1.11 sat $) -->    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://www.cyberciti.biz/tips/linux-shared-library-management.html">nixCraft/Vivek Gite: Linux Commands For Shared Library Management &amp; Debugging Problem</ulink>
      </title>
      <para>f you are a developer, you will re-use code provided by others. Usually /lib, /lib64, /usr/local/lib, and other directories stores various shared libraries. You can write your own program using these shared libraries. As a sys admin you need to manage and install these shared libraries. Use the following commands for shared libraries management, security, and debugging problems. (...)</para>
<!-- ($ ld: 15.1.11 sat $) -->    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink url="http://www.linux.com/learn/tutorials/396770-linux-kernel-module-management-101">Linux.com/Joe Brockmeier: Linux Kernel Module Management 101 </ulink>
      </title>
      <para>The Linux kernel allows drivers and features to be compiled as modules rather than as
        part of the kernel itself. This means that users can often change features in the kernel or
        add drivers without recompiling, and that the Linux kernel doesn&apos;t have to carry a lot of
        unnecessary baggage. Want to learn how to manage your modules? It&apos;s easy to do, just keep
        reading. </para>
      <para>In this tutorial, we&apos;ll walk through the steps of seeing what&apos;s already loaded in the
        running kernel, and adding and removing modules from the kernel. (...) <emphasis role="bold">License</emphasis>: <link linkend="credits">1</link></para>
<!-- ($ ld: 13.1.11 sm $) -->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.howtoforge.com/installing-cherokee-with-php5-and-mysql-support-on-opensuse-11.3">HowtoForge/Falko Timme: Installing Cherokee With PHP5 And MySQL Support On OpenSUSE 11.3</ulink>
      </title>
      <para>Cherokee is a very fast, flexible and easy to configure Web Server. It supports the widespread technologies nowadays: FastCGI, SCGI, PHP, CGI, TLS and SSL encrypted connections, virtual hosts, authentication, on the fly encoding, load balancing, Apache compatible log files, and much more. This tutorial shows how you can install Cherokee on an OpenSUSE 11.3 server with PHP5 support (through FastCGI) and MySQL support. (...)</para>
<!-- ($ ld: 15.1.11 sat $) -->    </blockquote>
  </sect2>
</sect1>
