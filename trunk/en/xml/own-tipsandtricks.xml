<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://www.omgubuntu.co.uk/2011/10/five-pretty-awesome-gnome-shell-themes/">OMG!
          Ubuntu!/Joey Sneddon: Five Pretty Awesome GNOME Shell Themes</ulink>
      </title>
      <para><emphasis role="bold">One of the great things about GNOME Shell is that it’s
          comprehensibly themeable – from the top panel and applet menus to the awesome
          on-screenkeyboard.</emphasis></para>
      <para>Below are five are five of my top GNOME Shell theme picks from those we’ve featured or
        been ‘tipped’ about recently. Don’t know how to install GNOME Shell themes? <ulink
          url="http://www.omgubuntu.co.uk/2011/10/how-to-install-gnome-shell-themes-in-ubuntu-11-10/"
          >We’ve got that covered.</ulink></para>
<!-- ($ Id: 06.11.11 sm $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.linuxjournal.com/content/four-hidden-tools-scribus">Linux Journal/Bruce Byfield: Four Hidden Tools in Scribus</ulink>
      </title>
      <para>Scribus is a powerful tool, but its menus are poorly laid-out. While you can usually
        find the features you most frequently use without any trouble, others may be hidden almost
        anywhere. From the Extras, Script, and Windows menus to the Document Setup dialog, useful
        features can be positioned almost anywhere, with only the most token regard for logic. </para>
      <para>The tools described here are ones that took some time for me to discover in Scribus.
        None are worth more than a few hundred words of description, but I mention them here because
        all of them can be useful to know. (...)</para>
      <!-- ($ Id: 03.11.11 sm $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/commands/understanding-the-cat-command/">BashShell.net/Mike: Understanding the cat Command</ulink>
      </title>
      <para><emphasis role="bold">cat</emphasis></para>
      <para>Cat is  used to either view, create, or join multiple text files together.  (In fact, the term “cat” is short for catenate, which is a fancy way of saying “to join two things together, end-to-end”.)</para>
      <para>By default, stdin for cat is the keyboard, and stdout is the computer screen.  If you just type “cat” at the command prompt, you’ll be able to type in text, and make it echo back to you as soon as you hit Enter.  It will keep doing this until you press Ctrl-d to end it. (...)</para>
<!-- ($ Id: 5.11.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/shell-scripts/exit-status-with-test/">BashShell.net/Mike: Testing the Exit Status of a Command</ulink>
      </title>
      <para><emphasis role="bold">test</emphasis></para>
      <para>The test command is used to determine exit status on numerous tests that can be performed in scripts. The test command does not produce any output it simply is checking for the exit status.  Note if you use variables with test be sure to enclose them in double quotes so the test receives an argument. (...)</para>
<!-- ($ Id: 5.11.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://olex.openlogic.com/wazi/2011/jquery-and-ajax-error-detection-and-handling/">Wazi/W. Jason Gilmore: jQuery and Ajax Error Detection and Handling</ulink>
      </title>
      <para>Website development duties were once assigned to different individuals with two distinct roles: A designer focused on the all matters related to the front-end HTML and CSS, and a developer was responsible for the server-side code. JavaScript’s meteoric rise to first-class citizen status has blurred these traditional lines, forcing developers into what was once considered taboo territory. The results have been spectacular, with frameworks such as <ulink url="http://olex.openlogic.com/packages/jquery">jQuery</ulink> significantly streamlining JavaScript’s often unwieldy native syntax, and programming techniques such as <ulink url="http://en.wikipedia.org/wiki/Ajax_%28programming%29">Ajax</ulink> bringing highly responsive user interfaces to the browser. The marrying of jQuery and Ajax has been particularly impactful, providing developers with a powerful solution to the problem of asynchronously interacting with and updating parts of a web page. (...)</para>
<!-- ($ Id: 5.11.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://how-to.linuxcareer.com/writing-manual-pages-on-linux">linuxcareer.com/Writing manual pages on Linux</ulink>
      </title>
      <para><emphasis role="bold">1. Introduction</emphasis></para>
      <para>It&apos;s a very common fact that nobody likes to write documentation. Heck, nobody likes to read it either. But there are times when we have to read it in order to, say, finish the project on time, or, especially when working in software development, even write it. If you only have to read it, we always encouraged you to do so, but if you&apos;ll have to write the manual pages and need a kickstart, here&apos;s the article for you. If you worked previously with HTML your life will be easier, but if not it&apos;s alright. Writing manual pages for Linux is not that hard, despite the look of the pages when read in plain-text. So basically you&apos;ll need some Linux knowledge and the ability to use a text editor. You will learn (with examples, of course) the main concepts in text formatting as applied to man pages and how to write a simple manual page. Since we used yest as an example for our <ulink url="http://how-to.linuxcareer.com/c-development-on-linux-introduction">C development tutorial</ulink>, we will use snippets from its manual page to illustrate our point during this article. (...)</para>
<!-- ($ Id: 5.11.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://net.tutsplus.com/tutorials/tools-and-tips/how-to-work-with-github-and-multiple-accounts/">net.tutsplus.com/Jeffrey Way: Quick Tip: How to Work with GitHub and Multiple Accounts</ulink>
      </title>
      <para>So you have a personal <ulink url="http://github.com/">GitHub</ulink> account; everything is working perfectly. But then, you get a new job, and now need to have the ability to push and pull to multiple accounts. How do you do that? I’ll show you how! (...)</para>
<!-- ($ Id: 5.11.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink
          url="http://sellingfreesoftwareforaliving.blogspot.com/2011/11/install-and-configure-tftp-server-for.html"
          >Han Wen Kam: Install and configure TFTP server for PXE boot environment</ulink>
      </title>
      <para>This blog entry describes how you would install and configure the TFTP (Trivial File
        Transfer Protocol) server for the purpose of building a PXE boot environment. The tftp
        server would transfer the syslinux binaries to boot up your physical machine. It will also
        present a text-based menu for the user to select what operating system to install.
        (...)</para>
<!-- ($ Id: 10.11.11 sm $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink
          url="http://stick.gk2.sk/blog/2011/11/getting-ssh-fingerprints-for-machines-in-your-network/"
          >Pavol Rusnak: Getting SSH fingerprints for machines in your network</ulink>
      </title>
      <para>Some time ago we were trying to get SSH fingerprints for all machines in our local
        network. Solution is not that straightforward, but it’s not a rocket science either:
        <programlisting>#!/bin/bash
tmpfile=$(mktemp)
for i in $(seq 2 254); do
    ssh-keyscan -t rsa,dsa,ecdsa 192.168.1.$i &gt;&gt; $tmpfile
done
ssh-keygen -l -f $tmpfile
rm -f $tmpfile</programlisting></para>
      <para>First, we retrieve the keys using ssh-keyscan, store them into temporary file and
        compute fingerprints afterwards using ssh-keygen. Or is there a less complex and more
        elegant solution?</para>
      <para>PS: Thanks <ulink
          url="http://administratosphere.wordpress.com/2011/05/28/getting-and-verifying-ssh-fingerprints/"
          >David</ulink> for kicking in the right direction.</para>
<!-- ($ Id: 10.11.11 sm $)-->    </blockquote>
  </sect2>
</sect1>
