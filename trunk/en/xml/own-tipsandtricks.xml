<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://scribblesandsnaps.wordpress.com/2011/07/11/process-photos-with-digikams-batch-queue-manager-and-a-bash-script/">Scribbles and Snaps: Process Photos with digiKam’s Batch Queue Manager and a Bash Script</ulink>
      </title>
      <para>One of digiKam’s lesser known features is the ability to link scripts to notifications. At first sight, this may seem like a rather obscure functionality, but it can be put to some clever uses. Say, you want to keep a portfolio of selected photos on a mobile device. Resizing multiple photos to a specified size to make it easier to view them on the mobile device and transferring the processed photos from digiKam to the mobile device manually is not very practical. And this is where the ability to trigger scripts via notifications can come in handy. You can attach a simple Bash script to the Batch <emphasis role="italic">queue completed</emphasis> notification, so it’s triggered automatically when the Batch Queue Manager tool is done processing photos. (...)</para>
<!-- ($ Id: 15.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.howtoforge.com/enabling-compiz-fusion-on-an-opensuse-gnome-11.4-desktop-nvidia-geforce-8100">HowtoForge/Falko Timme: Enabling Compiz Fusion On An OpenSUSE GNOME 11.4 Desktop (NVIDIA GeForce 8100)</ulink>
      </title>
      <para>This tutorial shows how you can enable <ulink url="http://www.compiz-fusion.org/">Compiz Fusion</ulink> on an OpenSUSE 11.4 GNOME desktop (the system must have a 3D-capable graphics card - I&apos;m using an NVIDIA GeForce 8100 here). With Compiz Fusion you can use beautiful 3D effects like wobbly windows or a desktop cube on your desktop. (...)</para>
<!-- ($ Id: 15.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title><ulink
          url="http://chenthill.wordpress.com/2011/07/15/exchange-webservices-offline-addressbook/"
          >Chenthill P: Exchange WebServices Offline AddressBook</ulink></title>
      <para>It is now possible to download GAL contents for offline usage through exchange web
        services in Evolution. Offline GAL is termed as Offline Address-book (OAB) in Exchange
        WebServices and it may contain one or more Offline Address-lists (OAL). (...)</para>
      <!--($ Id: 16.7.11 sm $)-->
    </blockquote>
  </sect2>
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/shell-scripts/alter-your-environment-with-functions/">BashShell.net/mike: Alter Your Environment with Functions</ulink>
      </title>
      <para>You can use functions to alter the environment of the user.  These functions can be added into the .bash_profile of an individual user or in the system wide /etc/profile.  It is best to verify the functions have no detrimental impact by using a normal user first as a test base.  You will need to enter the functions in the .bash_profile in the following format.  In this example two functions have been used and can be called with “dfh” or “duh”. (...)</para>
<!-- ($ Id: 15.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/shell-scripts/using-functions-in-a-library/">BashShell.net/mike: Using Functions in a Library</ulink>
      </title>
      <para>Function Library</para>
      <para>Another way of using functions is when you create more complicated scripts is to create functions that you place in a library so that you can source them from other scripts.    These library functions can be called from a script using “source” or the “dot” command. (...)</para>
<!-- ($ Id: 15.7.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.linuxnov.com/command-line-du-disk-usage-commands-tips/">LinuxNov: Command Line | du Disk Usage Commands | Tips</ulink>
      </title>
      <para>du is a disk usage command allows you to easily know file and directory sizes, also you can view file and directory sizes decreasing starting by biggest file, otherwise increasing by smallest file. (...)</para>
<!-- ($ Id: 15.7.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink
          url="http://saigkill.homelinux.net/entry/2011/07/15/how-to-use-three-open-build-service-source-services-to-simplify-the-packaging"
          >Sascha Manns: How to use three Open Build Service Source Services to simplify the
          packaging</ulink>
      </title>
      <para>This is a short HowTo about using the OBS Source Services.Sometimes a packager has a
        package who changes the Sourcecode very often. So the packager has to choose: On the first
        hand he can checkout the code from git or svn makes a tar.gz or bz2 from it or he can use
        the Source Services from the Buildservice. But how to do that? In the following Example i'm
        using calligra from the KDE:Active Repository. (...)</para>
<!-- ($ Id: 16.7.11 sm $)-->    </blockquote>
  </sect2>
  <!--
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink url="http://suse.gansert.net/?p=239">Uwe Gansert: Unattended Upgrade with AutoYaST</ulink>
      </title>
      <para>Today I want to introduce a new feature of SLES11 SP2. Usually you use AutoYaST to do fresh installations of a system including formatting the partitions and do all kind of new-system configuration in your AutoYaST XML.
With SLES11 SP2 you’ll have the option of doing unattended upgrades of a previously installed systems too.</para>
      <para>Imagine you have a running SLES10 SP4 and want to upgrade it now to SLES11 SP2 with AutoYaST, what are the steps to do that? (...)</para>
    </blockquote>
  </sect2> -->
</sect1>
