<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 role="tipsandtricks">
  <title>Tips and Tricks</title>
  <sect2>
    <title>For Desktop Users</title>
    <blockquote>
      <title>
        <ulink url="http://www.radioworld.com/article/119396">Radioworld/Stephen M. Poole: Let’s
          Build an OpenSUSE Storage Server</ulink>
      </title>
      <para><ulink url="http://www.opensuse.org">OpenSUSE</ulink> is my personal favorite of all the
        Linux distributions. It’s easy enough for the beginner, but can nonetheless be used to build
        an enterprise-class Web server, router or firewall. The online support in their <ulink
          url="http://forums.opensuse.org">forums</ulink> is excellent. The configuration tool
        (YaST, or <quote>Yet Another Setup Tool</quote>) is superb. Best of all, it’s free of
        charge. The only cost to you is the download time and a blank CD or DVD! </para>
      <para>In this article, I’ll use OpenSUSE to set up a simple, easy-to-use, but very secure
        file-sharing server. If you don’t have something like this, I’ll bet that your sales staff
        and their clients are sending huge files via e-mail. This not only puts a heavy load on your
        mail server, it’s inefficient. I’ll show you a much better way to do the job, using free
        software. (...)</para>
<!-- ($ Id: 24.4.11 sm $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.linuxjournal.com/content/converting-office-documents">Linux Journal/Johan Thelin: Converting Office Documents</ulink>
      </title>
      <para>Now and then, office-type documents need to be converted. The latex users have always been able to produce a variety of formats from the command line, but for the OpenOffice/LibreOffice users, manual labor has been the solution. That changes with unoconv. Now you can convert to most file formats directly from the command line.

</para>
      <para><emphasis role="bold">Unoconv</emphasis> is handy for many tasks. I commonly use it to convert all documents in a directory to PDFs, or MS Office compatible formats for clients. The beauty of it is that these previously tedious tasks are now one-liners. (...)</para>
      <para><emphasis role="bold">Editor&apos;s note</emphasis>: unoconv packages for openSUSE can be found in <ulink url="http://software.opensuse.org/search?p=1&amp;baseproject=ALL&amp;q=unoconv">OBS</ulink>.</para>
<!-- ($ Id: 23.4.11 sat $)-->    </blockquote>
    <blockquote>
      <title><ulink
        url="http://news.opensuse.org/2011/04/20/opensuse-servers-with-one-click/"
        >openSUSE servers with one click</ulink></title>
      <para>Everybody knows openSUSE offers a great desktop experience; but its also a perfect fit for
        servers! Go download the <ulink url="http://software.opensuse.org/114/en">Installation
          DVD</ulink> (or use one of the <ulink url="http://en.opensuse.org/Buy_openSUSE">manufactured
            DVD</ulink>s) and we’ll see how easy YaST makes it to setup a variety of specialized
        servers.</para>
      <para>During the course of a normal installation, the opportunity to add servers is slightly
        hidden. The last step before an actual installation is the Installation Overview. At this
        point, you can see a list of selected software patterns. Either click the “Software” header,
        or click “Software…” on the “Change…” menu. At this point, you will be presented with a list
        of available software patterns, including the Server Functions patterns: simply check off
        any servers you would like to install and click “OK” to return to your normal installation!
        (...)</para>
      <para><emphasis role="bold">License</emphasis>: <ulink
        url="http://www.gnu.org/licenses/old-licenses/fdl-1.2.html">GFDL 1.2</ulink></para>
      <!--($ ld: 21.4.11 sm $)-->
    </blockquote>
    <blockquote>
      <title><ulink
          url="http://lslezak.blogspot.com/2011/04/installing-latest-intel-graphics-driver.html"
          >Ladislav Slezak: Installing latest Intel graphics driver to openSUSE 11.4</ulink></title>
      <para>I have upgraded my home PC to Intel i5-2500K CPU (Sandy Bridge family). The CPU has a
        new integrated graphics core (Intel HD 3000) and it works out-of-box in openSUSE-11.4
        including 3D and composition. The only problem I noticed are broken popup menus and buttons
        in title bars in KDE. Esp. broken popups are very annoying as they are hardly usable, see
        e.g. <ulink url="https://bugs.freedesktop.org/attachment.cgi?id=45061"
          >https://bugs.freedesktop.org/attachment.cgi?id=45061</ulink>.</para>
      <para>Fortunately Intel has released updated X driver version 2.15 which fixes this problem.
        Here is a step by step how to install the updated driver in openSUSE 11.4.</para>
      <itemizedlist>
        <listitem>
          <para>Install xorg-x11-server-sdk
            package<programlisting>sudo zypper in xorg-x11-server-sdk</programlisting></para>
        </listitem>
        <listitem>
          <para>Download <ulink
              url="http://xorg.freedesktop.org/archive/individual/driver/xf86-video-intel-2.15.0.tar.bz2"
              >http://xorg.freedesktop.org/archive/individual/driver/xf86-video-intel-2.15.0.tar.bz2</ulink></para>
        </listitem>
        <listitem>
          <para>Unpack the
            archive<programlisting>tar xfjv xf86-video-intel-2.15.0.tar.bz2</programlisting></para>
        </listitem>
        <listitem>
          <para>Now compile the
            driver:<programlisting>cd xf86-video-intel-2.15.0./configure --prefix=/usr --libdir=/usr/lib64make</programlisting></para>
          <para>(If you have installed 32-bit system then use /usr/lib path in the second
            command.)</para>
        </listitem>
      </itemizedlist>
      <itemizedlist>
        <listitem>
          <para>Install the driver (will overwrite the files from RPM
            package)<programlisting>sudo make install</programlisting></para>
        </listitem>
      </itemizedlist>
      <itemizedlist>
        <listitem>
          <para>Restart the X server (simply relogin to a new session)</para>
        </listitem>
      </itemizedlist>
      <para>Voila, now your system should use the new driver and the artifacts in the KDE popups
        should be gone!</para>
      <para>Maybe someone can pack the driver into a RPM package in the openSUSE build service, but
        for me this solution is sufficient... </para>
      <!--($ ld: 23.4.11 sm $)-->
    </blockquote>
  </sect2>
  <!--
  <sect2>
    <title>For Commandline/Script Newbies</title>
    <blockquote>
      <title>
        <ulink url="http://bashshell.net/shell-scripts/understanding-the-for-loop/">BashShell.net/mike: 10 Days of Loops</ulink>
      </title>
      <para>Our &quot;10 Days of Loops&quot; tutorial series is in full swing. This short-course includes tutorials and exercises which are rolled out each day in an effort to help admins use loops more confidently.

    </para>
      <para>* <ulink url="http://bashshell.net/shell-scripts/understanding-the-for-loop/">Understanding the for Loop</ulink>
    </para>
      <para>* <ulink url="http://bashshell.net/shell-scripts/for-loop-example/">A for Loop Example</ulink>
    </para>
      <para>* <ulink url="http://bashshell.net/shell-scripts/practice-with-while-loops/">Practice with while Loops</ulink>
    </para>
      <para>* <ulink url="http://bashshell.net/shell-scripts/understanding-the-while-loop/">Understanding The While Loop</ulink>
    </para>
      <para>* <ulink url="http://bashshell.net/shell-scripts/if-then/">if then Statements</ulink>
(...)</para>
  </blockquote>
  </sect2> -->
  <sect2>
    <title>For Developers and Programmers</title>
    <blockquote>
      <title>
        <ulink url="http://python4kids.wordpress.com/2011/04/20/keeping-code/">Python4Kids/Brendan Scott: Keeping Code</ulink>
      </title>
      <para>Well, so far we’ve learnt about storing data (either “flat” in file, or as an object which Python does in pickles which are also data in files, but with some structure) but we don’t know anything about storing the code we are typing. This means that we need to go through the tedium of typing stuff in all the time (or cutting and pasting I guess).  It  is especially tedious when we mistype something.

</para>
      <para>In order to do some more complex things in Python we really need to be able to store our code somewhere so that typing mistakes we make don’t mean we have to re-type the whole kit and kaboodle. We could, if we really wanted to, open a file from within our Python prompt and write code to the file (as a flat file):</para>
      <screen> &gt;&gt;&gt; f = open(&apos;textfile.py&apos;,&apos;w&apos;)
 &gt;&gt;&gt; f.write(&quot;print &apos;This is some python code stored in a file&apos;&quot;)
 &gt;&gt;&gt; f.close()
 &gt;&gt;&gt; import textfile
 This is some python code stored in a file</screen>
      <para>What has happened here is that we’ve open()ed a file called ‘textfile.py’ (again, we’ve taken the chance that there isn’t already such a file, because open()ing it would delete the existing contents).  We’ve then written the following to the file: print ‘This is some python code stored in a file’ (...)</para>
<!-- ($ Id: 23.4.11 sat $)-->    </blockquote>
  </sect2>
  <sect2>
    <title>For System Administrators</title>
    <blockquote>
      <title>
        <ulink url="http://linuxadminzone.com/speed-up-large-mysql-backup-dump-restore-process/">Linux Admin Zone/Jagbir Singh: Speed up large MySQL backup, dump, restore processes</ulink>
      </title>
      <para>In general, MySQL is quite fast at restoring data, but I observed that while restoring 20gb of backup its taking more than the usual time. This can happen when you don’t have enough memory or if key_buffer_size is not set high enough, then it can take very long time to re-index the data. In CentOS 5.2 server with 6gb of RAM, I noticed key_buffer_size is set to just 800M which is very low. You should set it at least 20-25% of total RAM. After increasing the value to 2gb, MySQL is able to reload data quite fast.

</para>
      <para>Though this does trick for me but there are other helpful suggestions also which you can try/check to speed up your backup/restore process, few are as follows: (...)</para>
<!-- ($ Id: 23.4.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.linux.com/learn/tutorials/432537-another-ipv6-crash-course-for-linux-real-ipv6-addresses-routing-name-service">Linux.com/Carla Schroder: Another IPv6 Crash Course For Linux: Real IPv6 Addresses, Routing, Name Services</ulink>
      </title>
      <para>In the first <ulink url="http://www.linux.com/learn/tutorials/428331-ipv6-crash-course-for-linux">IPv6 for Linux crash course</ulink>, we covered some of the bare basics of IPv6 on Linux. Today we&apos;re going to learn how to use routable IPv6 addresses, some iptables rules to keep our experimentation from leaking out into the world, and about implementing DNS in IPv6.

</para>
      <para>You can perform all these tests on any two Linux PCs on your LAN without getting in the way of your normal IPv4 activities. Just remember to undo everything that you don&apos;t want to be permanent when you&apos;re finished. Save time and hassle by having SSH set up on all your PCs; then you can park yourself comfortably in one place and run most of these tests over SSH sessions and never get up, except at healthy intervals to prevent embolisms and joint seizures. (...)</para>
<!-- ($ Id: 23.4.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.howtoforge.com/virtualization-with-kvm-on-an-opensuse-11.4-server">HowtoForge/Falko Timme: Virtualization With KVM On An OpenSUSE 11.4 Server</ulink>
      </title>
      <para>This guide explains how you can install and use KVM for creating and running virtual machines on an OpenSUSE 11.4 server. I will show how to create image-based virtual machines and also virtual machines that use a logical volume (LVM). KVM is short for <emphasis role="bold">Kernel-based Virtual Machine</emphasis> and makes use of hardware virtualization, i.e., you need a CPU that supports hardware virtualization, e.g. Intel VT or AMD-V. (...)</para>
<!-- ($ Id: 23.4.11 sat $)-->    </blockquote>
    <blockquote>
      <title>
        <ulink url="http://www.novell.com/communities/node/12833/one-click-amazon-ec2-suse-studio">Novell Cool Solutions/Kevin Foster: One Click to Amazon EC2 from SUSE Studio</ulink>
      </title>
      <para>What happens when you pair the award-winning image- and appliance-building tool SUSE Studio with the market leader in cloud computing, Amazon Web Services? An ISV or developer&apos;s dream come true! We are proud to announce one-click deployment to Amazon EC2 directly from SUSE Studio. Novell has made it simple to create, test, and deploy your application image or appliance to EC2, providing a complete end-to-end solution for building and deploying cloud images. (...)</para>
<!-- ($ Id: 23.4.11 sat $)-->    </blockquote>
  </sect2>
</sect1>
