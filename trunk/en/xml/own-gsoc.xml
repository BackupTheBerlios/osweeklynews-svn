<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC 
  "-//OASIS//DTD DocBook XML V4.5//EN" 
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 id="gsoc" role="gsoc">
  <title>Google Summer of Code</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="http://michal.hrusecky.net/wp-content/uploads/GSoC2011_300x200.png"
        width="20%" align="center"/>
    </imageobject>
  </mediaobject>
  <blockquote>
    <title><ulink url="http://rxvl.in/post/6175434117">Ratan Sebastian: GSOC 2011: ssc - Week
        2</ulink></title>
    <para>In terms of user functionality, searching for software, templates, appliances and packages
      has been implemented this week. The actual api calls are performed by handler classes like
      SSC::Handler::Appliance which exposes public methods like list, show, repositories and
      installed_software. I’m trying to follow a template that allows any command of the type ssc to
      map directly to Class#action(arguments) with minimum modification along the way. The command
      line arguments (—option value) are parsed into an options hash that keeps getting passed down
      the stack and used as necessary. Right now I’m not happy about exposing data that is
      unnecessary for certain functions via this hash but it makes sense to have the checking of
      data in the handler action rather than at the top level which makes that inevitable. </para>
    <para>There’s been some abstraction and refactoring to make way for having the .sscrc file what
      will hold the appliance configuration in the appliance directory. Right now there isn’t a lot
      of validation of options and the parser merely merges options from .sscrc and the command line
      to pass into the various handlers. </para>
    <para>One tiny useful takeaway from this week has been learning about the Method class. Its very
      useful in meta-programming. For instance when calling methods with the Class#send method it
      would be useful to make sure that you’re passing the correct number of arguments. The
      Method#arity method can be used to check the number of arguments that a method takes before
      passing arguments to it. </para>
    <para>Next week I’m going to be focusing on the structure of the appliance directory and
      handling those commands that work locally.</para>
    <!-- ($ ld: 6.6.11 sm $) -->
  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://sysbytes.wordpress.com/2011/06/06/sax3-gsoc-2011-work-report/">Manu Gupta:
        SaX3 – GSoC 2011 – Work Report</ulink></title>
    <para>This week I worked on SaX3 internal UI architecture, offcourse we will be using libyui but
      we wanted to make it as flexible as possible so that the UI Library can be replaced by anybody
      and still keep SaX usable, for that we implemented the factory pattern and most of the code
      was working. Finally, we have something working and the screenshots below show that SaX3 is
      working in graphical mode and ncurses mode.</para>
    <para>I am adding screenshots of the launcher that will launch various configuration modules
      such as keyboard, mouse, graphic card etc etc . Also this is just a start and by the time I
      present my next report I week, this will be much cleaner and you can play around more with it.
      Right now it does not do anything so dont get surprised.</para>
    <para>
      <informaltable frame="all">
        <tgroup cols="2">
          <colspec colname="c1" colnum="1"/>
          <colspec colname="c2" colnum="2"/>
          <tbody>
            <row>
              <entry>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="http://sysbytes.files.wordpress.com/2011/06/sax3.png" width="50%"/>
                  </imageobject>
                </mediaobject>
              </entry>
              <entry>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="http://sysbytes.files.wordpress.com/2011/06/sax3-ncurses.png" width="50%"/>
                  </imageobject>
                </mediaobject>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>Source code can be found at <ulink url="http://github.com/manugupt1/sax3"
        >github.com/manugupt1/sax3</ulink> The working branch is newui1.</para>
    <para>cmake is a bit messy, I will update it in the following week and a bit of other clean up
      tasks and try some other stuff like localisation in it.</para>
    <!-- ($ ld: 6.6.11 sm $)-->
  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://nbprashanth.wordpress.com/2011/06/06/gsoc-report/">N.B.Prashanth: GsoC
        Report – 1</ulink></title>
    <para>This is my GsoC report for the first two weeks (May 23 – June 04). Iwill also in brief
      state the goals of the project and the future plans.My project for this years GsoC is
      “Separating libYUI” for the OpenSUSEorganization. My mentor for the project is Martin Vidner
      and theabstract can be found at: <ulink
        url="http://www.google-melange.com/gsoc/project/google/gsoc2011/nbprashanth/22003"
        >http://www.google-melange.com/gsoc/project/google/gsoc2011/nbprashanth/22003</ulink></para>
    <para>Let me begin by laying out the main goals of this project. The projectaims to:<orderedlist>
        <listitem>
          <para>Separate YUI from the YaST framework.</para>
        </listitem>
        <listitem>
          <para>Port YUI to other major Operating Systems such as Ubuntu and Fedora.</para>
        </listitem>
        <listitem>
          <para>Remove the libzypp dependency for the gtk pluging and hence making YUI
            SUSE-independent.</para>
        </listitem>
        <listitem>
          <para>Improve documentation with doxygen.</para>
        </listitem>
        <listitem>
          <para>Provide small tutorials.</para>
        </listitem>
        <listitem>
          <para>To provide a large and non-trivial example to show the capability of YUI.</para>
        </listitem>
      </orderedlist></para>
    <para>The work done so far is listed below :<orderedlist>
        <listitem>
          <para>libYUI has been successfully compiled on Ubuntu 11.04 and Fedora 15.</para>
        </listitem>
        <listitem>
          <para>Initial packages for libYUI along with ncurses and Qt plugins havebeen made. They
            are available in my gitorious account: gitorious.org/libyui</para>
        </listitem>
        <listitem>
          <para>Small scale examples are being added to this blog. I will try tomaintain a weekly
            schedule.</para>
        </listitem>
        <listitem>
          <para>Currently, I am trying to eliminate the libzypp dependency for the Gtk plugin. This
            is important as libzypp is highly OpenSUSEcentric.</para>
        </listitem>
        <listitem>
          <para>The packages are currently in the testing phase. So all interestedpeople, please
            feel free to test and post any bugs you may find in thecomments section. Please note,
            this is an initial version.</para>
        </listitem>
        <listitem>
          <para>Patches have been made for small bugs like “long long” warnings andenumeration
            ending with a ‘,’. More serious bugs, if reported will betended to when
            encountered.</para>
        </listitem>
      </orderedlist></para>
    <para>Another important change that I would like to implement is the use of auniform build
      system. Currently, some parts use CMake while others useautotools. Though this does not make
      much of a difference to the outsideworld, I think it will be easier for developers and porters
      in the longrun. But this will be done later on unless there is an urgent need forit.</para>
    <para>Since my end semester exams ended on May 27th, no work was done duringthe first week of
      GsoC. Hence, this can be regarded as a summary of mywork for the second week (May 29 – June
      04). Also, please note that Iwill maintain weekly reports on the blog henceforth.</para>
    <para>Please feel free to add comments and suggestions below.</para>
    <!--($ ld: 6.6.11 sm $)-->
  </blockquote>
  <blockquote>
    <title><ulink url="http://blog.jospoortvliet.com/2011/06/gsoc-mentoring.html">Jos Poortvliet:
        GSOC mentoring</ulink></title>
    <para>Dave Neary has written an <ulink
        url="http://blogs.gnome.org/bolsh/2011/05/31/effective-mentoring-programs/">interesting
        blogpost on 'effective mentoring'</ulink>.</para>
    <para>If you don't feel like reading the whole thing (it's big, yes) I can give you some
      highlights on common issues that make mentoring less effective:<itemizedlist>
        <listitem>
          <para>communication. Apprentices often expect their mentor to check in, the mentor expects
            apprentices to ask questions if they have any. This means it is a wise thing to contact
            your apprentice and:<itemizedlist>
              <listitem>
                <para>ask how it is going, if they need any help</para>
              </listitem>
              <listitem>
                <para>tell them they have to be pro-active: ask questions and give you reports. Just
                  to correct their perception if they expected YOU to ask them! Make clear it has to
                  be pull from their side, it won't be push from yours. Their GSOC project is their
                  responsibility.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para>Mentoring doesn't stop in August: realize YOU are the friendly face to the project
            for the student/apprentice. Please be prepared to keep talking to the students and help
            them, even (especially!) if GSOC is over! And tell them so.</para>
        </listitem>
        <listitem>
          <para>Regular meeting are really important. Have a weekly IRC chat and just talk. Both
            about personal things (get to know each other!) and about the project.</para>
        </listitem>
        <listitem>
          <para>And please tell the students to help each other and others. That is both a learning
            experience for them, AND they understand others who are new better than anyone!</para>
        </listitem>
      </itemizedlist></para>
    <para>If you have questions, please ask on the mentor mailinglist, not only on IRC. Others can
      learn from the answers. Others here includes me, btw, I love to know what issues you bump
      into!</para>
    <para>Good luck mentoring and remember, we want the students to STAY, not just fire some code at
      us and go again ;-)</para>
    <!--($ ld: 6.6.11 sm $)-->
  </blockquote>
</sect1>
