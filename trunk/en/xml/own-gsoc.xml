<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC 
  "-//OASIS//DTD DocBook XML V4.5//EN" 
  "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 id="gsoc" role="gsoc">
  <title>Google Summer of Code</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="http://michal.hrusecky.net/wp-content/uploads/GSoC2011_300x200.png"
        width="20%" align="center"/>
    </imageobject>
  </mediaobject>
  <blockquote>
    <title><ulink url="http://sysbytes.wordpress.com/2011/06/12/sax3-gsoc-2011-weekly-report-2/"
        >Manu Gupta: SaX3 – GSoC 2011 – Weekly Report 2</ulink></title>
    <para>This is my 2nd report, this week not to show much for the users, but we did a quite
      interesteing things. SaX is now module oriented.So, if anyone wants to write a module for SaX3
      it is possible now. Besides the important things which I did was.<orderedlist>
        <listitem>
          <para>Learn the augeas C api</para>
        </listitem>
        <listitem>
          <para>Submitted a  .desktop lens for augeas</para>
        </listitem>
        <listitem>
          <para>It is module oriented</para>
        </listitem>
        <listitem>
          <para>Tried out Doxygen</para>
        </listitem>
        <listitem>
          <para>SaX3 is now localised.</para>
        </listitem>
      </orderedlist></para>
    <para>The launcher is now complete <mediaobject>
        <imageobject>
          <imagedata
            fileref="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif?m=1304368896g"/>
        </imageobject>
      </mediaobject> Again, the source code is here<ulink url="http://github.com/manugupt1/sax3"
        >http://github.com./manugupt1/sax3</ulink> Regarding modules, If anyone wants to check out
      how modules work, they work using .desktop files  in /usr/share/sax3/modules.d. If you will
      remove it we can remove it from the launcher.</para>
    <!-- ($ ld: 14.6.11 sm $) -->
  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://rxvl.in/post/6481353758/gsoc-2011-ssc-week-3">Ratan Sebastian: GSOC 2011:
        ssc - Week 3</ulink></title>
    <para>This week I was working on the local storage feature of the client. As proposed we were
      going to add and remove packages, repositories and files with a git-like workflow.
      i.e. <screen>ssc package add gnuchess</screen>would make a local record of the intention to
      add that package and on <screen>ssc commit</screen>the changes would actually be
      pushed.</para>
    <para>In order to facilitate this I’m abstracting all the directory management to a
      DirectoryManager module. Which abstracts methods to save, read and diff from local sources.
      Right now the syntax I’ve chosen is YAML. For instance the software file in the appliance
      directory - which catalogues the changes made to the appliance’s software - stores names of
      installed packages. Unless the ssc command is invoked with the -r | --remoteoption, it will
      display the packages in that file. In addition when ssc package add gnuchess is run with out
      the -r option, it will make and addition add gnuchess to the software file. Similarly for
      remove. I am having some problems figuring out how to integrate patterns into this
      architecture so any help on that front would be appreciated.</para>
    <para>That’s it for this week. I’m going to be working on pretty much the same thing next week.
      Extending and refactoring this functionality. So hopefully we will have a more usable version
      then.Thank you for reading.</para>
    <!-- ($ ld: 14.6.11 sm $)-->
  </blockquote>
  <blockquote>
    <title>
      <ulink
        url="http://cbounta.wordpress.com/2011/06/10/a-utility-for-merging-configuration-sysconfig-files-week-3-report/"
        >Christos Bountalis: A utility for merging configuration / sysconfig files – Week 3
        Report</ulink></title>
    <para>This my regular weekly post on my GSoC project. Even though this week I had to give my
      last exams for my bachelor degree and some days of the week I had to spent them on reading, I
      did some progress on the actual project. First of all, I created my first patch for Augeas,
      yes this is my first patch not for this particular project, but in general. Every week I found
      my self, reading learning and carrying out new things, this is the coolest and most exciting
      thing in the GSoC experience until now.</para>
    <para>Back to the actual patch, below you can see the description of the patch:<blockquote>
        <para>Subject: [PATCH] Added aug_find_lense function to find and return used for loading a
          specific file</para>
        <para>Aug_find_lense is a function that accepts a path of a file, and tries to find the
          lense that was used to load this file in Augeas. Returns either a string representing the
          lense if it is located succesfully either null if the lense could not be found, or the
          file is not loaded in augeas.</para>
      </blockquote></para>
    <para>As i had told you before, i am working on a merge method for augtool as well. This command
      works like this,</para>
    <para>merge destination merging-parameters files-to-be-merged</para>
    <para>example:</para>
    <para>merge /etc/hosts/ (merging-parameters) /tmp/myfile1 /tmp/myfile2 ….. /tmp/myfile3</para>
    <para>Until now I am able to use the aug_find lense to locate the lense used for the destination
      file. Then i have implemented an extra function that can use the name of the lense to load the
      files-to-merged to augeas. This permits me to have all these files in tree form used by
      Augeas. The plan now is to finish the code with aug_process_tree function[1] that will try to
      match the destination with the files-to-be-merged, and will then call the right function
      according to merging-parameters if a match is found.</para>
    <para><emphasis role="bold">What is next? </emphasis></para>
    <para>By having a merge command in augtool, that can load files in the way I mentioned above, i
      now have a test basis that will permit me to implement and test the merging functions. This
      must be done in the next two weeks, so i can be in the initial schedule. I am quite
      optimistic, things will go as planned. This week among with the coding there has been quite a
      lot of research on tree pattern matching algoriths, I am grateful that there are always nice
      people in open source communities that provide help and tips. I am back to coding… <inlinemediaobject>
        <imageobject>
          <imagedata
            fileref="http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif?m=1307715965g"/>
        </imageobject>
      </inlinemediaobject></para>
    <para>Kind Regards,</para>
    <para>Christos</para>
    <para>[1] Work in Progress – The aug_process_tree function will be like: int
      aug_process_trees(struct augeas *aug, const char *dest, void (*process)(struct augeas *aug,
      const char *first, const char *second, void* data), void* data,const char *sources,…);</para>
    <!--($ ld: 12.6.11 sm $)-->
  </blockquote>
  <blockquote>
    <title><ulink url="http://blog.jospoortvliet.com/2011/06/gsoc-mentoring.html">Jos Poortvliet:
        GSOC mentoring</ulink></title>
    <para>Dave Neary has written an <ulink
        url="http://blogs.gnome.org/bolsh/2011/05/31/effective-mentoring-programs/">interesting
        blogpost on 'effective mentoring'</ulink>.</para>
    <para>If you don't feel like reading the whole thing (it's big, yes) I can give you some
      highlights on common issues that make mentoring less effective:<itemizedlist>
        <listitem>
          <para>communication. Apprentices often expect their mentor to check in, the mentor expects
            apprentices to ask questions if they have any. This means it is a wise thing to contact
            your apprentice and:<itemizedlist>
              <listitem>
                <para>ask how it is going, if they need any help</para>
              </listitem>
              <listitem>
                <para>tell them they have to be pro-active: ask questions and give you reports. Just
                  to correct their perception if they expected YOU to ask them! Make clear it has to
                  be pull from their side, it won't be push from yours. Their GSOC project is their
                  responsibility.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para>Mentoring doesn't stop in August: realize YOU are the friendly face to the project
            for the student/apprentice. Please be prepared to keep talking to the students and help
            them, even (especially!) if GSOC is over! And tell them so.</para>
        </listitem>
        <listitem>
          <para>Regular meeting are really important. Have a weekly IRC chat and just talk. Both
            about personal things (get to know each other!) and about the project.</para>
        </listitem>
        <listitem>
          <para>And please tell the students to help each other and others. That is both a learning
            experience for them, AND they understand others who are new better than anyone!</para>
        </listitem>
      </itemizedlist></para>
    <para>If you have questions, please ask on the mentor mailinglist, not only on IRC. Others can
      learn from the answers. Others here includes me, btw, I love to know what issues you bump
      into!</para>
    <para>Good luck mentoring and remember, we want the students to STAY, not just fire some code at
      us and go again ;-)</para>
    <!--($ ld: 6.6.11 sm $)-->
  </blockquote>
  <blockquote>
    <title><ulink
        url="http://obsforandroid.wordpress.com/2011/06/10/obs-mobile-package-page-makeover/"
        >Justine Leng: [Seeking Feedback] OBS mobile: project / package page
      makeover</ulink></title>
    <para>In this post, I would like to discuss some ideas I’ve had on improving the project /
      package view pages in the OBS mobile client, and seek users’ feedback. (Please also <ulink
        url="http://obsforandroid.wordpress.com/2011/06/09/obs-mobile-request-page-makeover/">take a
        look</ulink> at my proposal on the request page makeover.)</para>
    <para>On the OBS mobile client’s homepage, the “List of All Projects” displays as
    follows:</para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="http://obsforandroid.files.wordpress.com/2011/06/package1.png"
          width="20%"/>
      </imageobject>
    </mediaobject>
    <!--($ ld: 11.6.11 sm $)-->
  </blockquote>
  <blockquote>
    <title><ulink
        url="http://alex.eftimie.ro/2011/06/10/packagekit-backend-for-software-center-week-2-report/"
        >Alex Eftimie: PackageKit backend for Software Center: week 2 report</ulink></title>
    <para>A week of fail and win has almost ended.</para>
    <para>On the fail part, I had a hard time building pygobject, gobject-introspection and glib
      from git.gnome.org. At first I’ve trying pulling from git, configuring and building, without
      luck. Then I switched to jhbuild, which after a few sanitychecks, bootstraps and
      configuration, worked; a day after I found that I’m on the stable branch (-2-28/gnome-3) which
      wasn’t good enough for my aim at patching master, and have switched branches to master, trying
      build -n. Of course it didn’t work until I hacked PKG_CONFIG_PATH to include paths such as
      /usr/share/pkgconfig, /usr/lib/pkgconfig and /usr/lib/i386-linux-gnu/pkgconfig – with help
      from walters on #introspection. This week my hard drive was about to die – because of a <ulink
        url="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/397096">bug in the kernel driver
        for ata</ulink>, it was reset every 30 seconds, causing everything to freeze. Different
      liveCDs have failed, the symptoms were ambigous and hard to reproduce – almost an entire day
      of fun.</para>
    <para>On the win side, I figured out the hdd problem, and locked the kernel version to 2.6.38-9
      for now. Hacked pygobject, posted patch in bugzilla B-), I’m one <ulink
        url="https://mail.gnome.org/archives/python-hackers-list/2011-June/msg00005.html"
        >step</ulink> further into making packagekit python bindings work; also I used the remaining
      time to push forward some <ulink
        url="https://code.launchpad.net/~alexeftimie/software-center/backend-refactor">more</ulink>
      preparation refactor on software-center.</para>
    <para>I have also updated the GSoC <ulink
        url="http://swarm.cs.pub.ro/%7Ealexef/gsoc/gsoc-calendar.html">timeline</ulink> – I’ll try
      to keep it up to date.</para>
    <para>For the next week, same objectives remain.</para>
    <para>PS: If you’re a python hacker and feel like helping out <inlinemediaobject>
        <imageobject>
          <imagedata fileref="http://alex.eftimie.ro/wp-includes/images/smilies/icon_smile.gif"/>
        </imageobject>
      </inlinemediaobject> , please check this <ulink
        url="http://swarm.cs.pub.ro/~alexef/gsoc/gsoc-calendar.html">bug</ulink> report out.</para>
    <!--($ ld: 11.6.11 sm $)-->
  </blockquote>
  <blockquote>
    <title><ulink
        url="http://cbounta.wordpress.com/2011/06/10/a-utility-for-merging-configuration-sysconfig-files-week-3-report/"
        >Christos Bountalis: A utility for merging configuration / sysconfig files – Week 3
        Report</ulink></title>
    <para>This my regular weekly post on my GSoC project. Even though this week I had to give my
      last exams for my bachelor degree and some days of the week I had to spent them on reading, I
      did some progress on the actual project. First of all, I created my first patch for Augeas,
      yes this is my first patch not for this particular project, but in general. Every week I found
      my self, reading learning and carrying out new things, this is the coolest and most exciting
      thing in the GSoC experience until now. (...)</para>
    <!--($ ld: 11.6.11 sm $)-->
  </blockquote>
  <blockquote>
    <title><ulink url="http://lizards.opensuse.org/2011/06/10/gsoc-summary-of-week-3/">Marcus Hüwe:
        [gsoc] summary of week 3</ulink></title>
    <para>here’s a small summary of the 3rd (coding) week. This week I spent most of my time with
      developing the remote model classes. The goal  was to put most of the code into a base class
      from which all remote models will be derived (if you’re interested how it works have a look at
      it). So far we have classes for:</para>
    <itemizedlist>
      <listitem>
        <para>a remote project (RemoteProject – manages project metadata)</para>
      </listitem>
      <listitem>
        <para>a remote package (RemotePackage – manages package metadata)</para>
      </listitem>
      <listitem>
        <para>a request (Request)</para>
      </listitem>
    </itemizedlist>
    <para>TODO for this week:</para>
    <itemizedlist>
      <listitem>
        <para>add exception handling to the httprequest.py module</para>
      </listitem>
      <listitem>
        <para>add a RemoteFile class which can be used to access a remote file</para>
        <para> like a buildlog, prjconf or a source file</para>
      </listitem>
      <listitem>
        <para>add a BuildResult class:</para>
        <para> - get the build results for a project or package</para>
        <para> - get the buildlog of a package</para>
        <para> - get the binary/binaries from the api</para>
      </listitem>
    </itemizedlist>
    <!--($ ld: 11.6.11 sm $)-->
  </blockquote>
</sect1>
