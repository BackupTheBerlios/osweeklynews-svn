<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % myentities SYSTEM "entities.ent">
%myentities;
]>
<!--
  
  This work is licensed under the
  Creative Commons Attribution-ShareAlike 3.0 Unported License
  by Sascha Manns. To view a copy of this license, visit
  http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
  Creative Commons
  171 Second Street
  Suite 300
  San Francisco California 94105
  USA.
  
-->
<sect1 id="gsoc" role="gsoc">
  <title>Google Summer of Code</title>
  <mediaobject>
    <imageobject>
      <imagedata width="20%" align="center" fileref="http://michal.hrusecky.net/wp-content/uploads/GSoC2011_300x200.png"/>
    </imageobject>
  </mediaobject>
  <blockquote>
    <title>
      <ulink url="http://alex.eftimie.ro/2011/07/02/packagekit-backend-for-software-center-short-week-5-report/">Alex Eftimie: PackageKit backend for Software Center: short week 5 report</ulink>
    </title>
    <para>This week I continued work on the install backend, especially connecting the PackageKit transaction signals to the software-center’s TransactionWatcher (also abstracted by me some time ago).</para>
    <para>The challenge stands in differences from PackageKit and AptDaemon, such as in AD, after preparing a transaction and manually commiting it,  one has access to the transaction object, and can watch for progress changes; in PK, after a transaction is launched, there are two ways of getting access to it: first by listening to a TransactionListChanged signal in D-Bus and second by watching the objects returned by the progress_callback callback.</para>
    <para>The current approach, helped closely by hue-see (hughsie) on #PackageKit is to get the transactions from the callback and listen to the gobject notify::&lt;property&gt; signals.</para>
    <para>More to come next week, stay tuned!
</para>
<!-- ($ ld: 10.7.11 sat $)-->  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://alex.eftimie.ro/2011/07/08/packagekit-backend-for-software-center-week-6-report/">Alex Eftimie: PackageKit backend for Software Center: week 6 report</ulink>
    </title>
    <para>Hi everyone, for this week report I would like to show you a screencast with the packagekit-backend branch of software-center: (...)</para>
<!-- ($ ld: 10.7.11 sat $)-->  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://rxvl.in/post/7219106912/gsoc-2011-ssc-week-6">Ratan Sebastian: GSOC 2011: ssc Week 6</ulink>
    </title>
    <para>Most of the work this week has gone into the File Handler. Adding and removing files in appliances has been implemented although there is a lot of work left to be done to make this robust. Right now its pretty basic. However I’m going to ease up on adding functionality right now to make the app more robust and usable. The mid-term evaluations are coming up and the plan is to have a usable app that is community tested by then. Not to say that new features won’t be added over the next two weeks, but it will be a second priority. In making the app more stable, the following things will be addressed:</para>
    <orderedlist>
      <listitem>
        <para>Ruby 1.8.7 (backward) compatibility</para>
      </listitem>
      <listitem>
        <para>Extended test-suite including integration tests which require a network connection</para>
      </listitem>
      <listitem>
        <para>Better error handling.</para>
      </listitem>
      <listitem>
        <para>A method to roll back changes in case of failure.</para>
      </listitem>
      <listitem>
        <para>Documentation.</para>
      </listitem>
    </orderedlist>
    <para>That will be the focus over the next two weeks building up to the mid-term evaluation. Thank you for reading. As always you can check out the core <ulink url="http://gitorious.org/ssc/ssc">here</ulink>.</para>
<!-- ($ ld: 10.7.11 sat $)-->  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://nbprashanth.wordpress.com/2011/07/04/yui-moves-to-sourceforge/">N.B.Prashanth: YUI moves to SourceForge</ulink>
    </title>
    <para>Over the last month, libYUI has significantly expanded. It is an independent framework and is avalable outside the SUSE framework making it accessible to a wide audience. This has resulted in the project having distributed content on the web. For example, the source code is maintained at gitorious.org (currently svn.opensuse.org) and the documentation at docs.opensuse.org etc. YUI does not have it’s own mailing list and the issues are still being dealt with on the yast ML. Considering all this, we thought that it would be good to have a central place where from all the resources can be accessed. Thus, we bring to you, <ulink url="http://sourceforge.net/projects/libyui/">sourceforge.net/projects/libyui/</ulink>.</para>
    <para>This means that :</para>
    <orderedlist>
      <listitem>
        <para>YUI has it’s own bug tracker. Any bugs/feature requests should be reported at the sourceforge page.</para>
      </listitem>
      <listitem>
        <para>YUI will not maintain it’s source code at SF as we are already porting the code to gitorious.org.</para>
      </listitem>
      <listitem>
        <para>Current release tarballs can be found at the SF downloads page.</para>
      </listitem>
      <listitem>
        <para>Mailing List for YUI can be found at libyui-devel@lists.sourceforge.net. This can be used for all YUI (not YaST) related discussions.</para>
      </listitem>
      <listitem>
        <para>Webpage for YUI along with examples and links to external resources will be up soon.</para>
      </listitem>
      <listitem>
        <para>Forum for YUI related topics is available at SF.</para>
      </listitem>
    </orderedlist>
    <para>So, stay tuned to sourceforge to keep track of YUI!</para>
<!-- ($ ld: 10.7.11 sat $)-->  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://lizards.opensuse.org/2011/07/04/gsoc-osc-code-cleanup-%E2%80%93-summary-of-week-6/">Marcus Hüwe: [gsoc] osc code cleanup – summary of week 6</ulink>
    </title>
    <para>here’s a small summary of the 6th (coding) week. Unfortunately I had
to spent more time with university stuff than I expected – that’s why
I didn’t finish the complete todo for this week.
I did some code restructuring and started to work on the class for the
source route.</para>
    <para>TODO:</para>
    <para>- rewrite the project and package working copy classes:</para>
    <itemizedlist>
      <listitem>
        <para>the new working copy format will be incompatible with the current
    format.</para>
      </listitem>
    </itemizedlist>
    <itemizedlist>
      <listitem>
        <para>the basic layout will look like this:</para>
      </listitem>
    </itemizedlist>
    <para>prj</para>
    <para>|</para>
    <para>—&gt; .osc/ (stores prj _and_ pkg metadata)</para>
    <para>|</para>
    <para>—&gt; pkg1</para>
    <para>#       |</para>
    <para>#        —&gt; &lt;files&gt;
    </para>
  </blockquote>
  <blockquote>
    <para>…</para>
    <para>|</para>
    <para>—&gt; pkgN</para>
    <para>#       |</para>
    <para>#        —&gt; &lt;files&gt;</para>
    <para>So all metadata is stored in the prj/.osc dir instead of prj/pkg/.osc
    The advantage is that we can support a complete package
    “restore” (without the need to download the package again):</para>
    <para>cd prj; rm -r pkg; osc revert/restore pkg;</para>
    <para>(that’s possible because the metadata is stored in the prj/.osc
    dir).</para>
    <itemizedlist>
      <listitem>
        <para>to convert old project/package working copies to the new format
    the “osc repairwc” command can be used (at least that’s the plan)</para>
      </listitem>
    </itemizedlist>
    <para>Feedback is always welcome.</para>
<!-- ($ ld: 10.7.11 sat $)-->  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://sysbytes.wordpress.com/2011/07/08/sax3-get-your-hands-dirt/">Manu Gupta: SaX3 – Get your hands dirty</ulink>
    </title>
    <para>Its been a long time I posted anything, but things look promising now, SaX3 is moving forward and 2 of its module have been completed, the keyboard module and the mouse module, so please test it and give me your feedbacks and if there are any bugs. BUGS will certainly be squashed, I dont know about UI changes. Suggestions are welcome. I plan to work on touchpads next. (...)</para>
<!-- ($ ld: 10.7.11 sat $)-->  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://cbounta.wordpress.com/2011/07/08/a-utility-for-merging-configuration-sysconfig-files-%E2%80%93-week-7-report/">Christos Bountalis: A utility for merging configuration / sysconfig files – Week 7 Report</ulink>
    </title>
    <para>This is the 7th week report for my GSoC project. During the implementation of the matching procedures, i talked in my last blog post, there were some new developments concerning the project. That made the actual matching procedure halt for a while, because there are no effective way at the moment to test the matching progress in the actual implementation. Where is the problem? The problem that occurred is the handling of the special comments that are used in many of the sysconfig files. These comments may appear next to simple description comments but contain useful information that are then interpreted by the program, such information could be for example the type of a variable etc. So what now? This week I am trying to find an effective way to deal with this problem, the initial idea i have is to modify the sysconfig lens, used by Augeas, in order to represent the sysconfig files in a tree form (with more levels that the current) that will be suitable for the matching/sorting algorithms i have already implemented. (...)</para>
<!-- ($ ld: 10.7.11 sat $)-->  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://forums.opensuse.org/english/other-forums/community-fun/opensuse-wiki-discussions/">Justine Leng: git commit</ulink>
    </title>
    <para>Finally committed and pushed a batch of changes I had made on request views and project/page views to the master branch. See diffs on Gitorious: <ulink url="https://gitorious.org/~justineleng/opensuse/justineleng-build-service">https://gitorious.org/~justineleng/opensuse/justineleng-build-service</ulink> (...)</para>
<!-- ($ ld: 10.7.11 sat $)-->  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://verybin.tumblr.com/post/7194777955/weekly-report-3">Eric Yang: Porting Wubi to OpenSUSE [weekly report #3]</ulink>
    </title>
    <para>the windows’ side of this app works fine now, that means the tool will do the preparation work like download and check iso image, create virtual disk file, create installation entry and so on. the left work is done after reboot — the real installation progress, that’s the main part I was/am focusing on.</para>
    <para>during the past week, I was focusing on modification of boot settings, as there is no detailed log info for boot progress, the project did not evolve very smoothly:( problem is that installer can not create loop device successfully after reboot. I will try my best to solve this problem in this week.</para>
<!-- ($ ld: 10.7.11 sat $)-->  </blockquote>
  <blockquote>
    <title>
      <ulink url="http://redache.wordpress.com/2011/07/08/entomologist-ui-changes-weekly-report-7/">David Williams: Entomologist UI Changes Weekly Report #7</ulink>
    </title>
    <para>This week I&apos;ve been focused on adding TODO list functionality to Entomologist.
I haven&apos;t quite finished the implementation but it is nearing basic completion.
Once I&apos;ve finished the UI/core functionality I will then work on adding cloud
connection features so that the lists can be synced with various calendar
services/WebDAV servers.</para>
    <para>My plan for next week is to:</para>
    <para>- Finish up the UI/core functionality.</para>
    <para>- Start the cloud integration once this is wholly complete.</para>
    <para>By this time next week I&apos;ll hopefully have much more to show off to coincide
with the Midterm point :).</para>
<!-- ($ ld: 10.7.11 sat $)-->  </blockquote>
</sect1>
